<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My World</title>
  
  
  <link href="https://godofl.github.io/atom.xml" rel="self"/>
  
  <link href="https://godofl.github.io/"/>
  <updated>2021-11-15T05:21:41.098Z</updated>
  <id>https://godofl.github.io/</id>
  
  <author>
    <name>GODOFL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript笔记</title>
    <link href="https://godofl.github.io/2021/11/15/JavaScript%20notes/"/>
    <id>https://godofl.github.io/2021/11/15/JavaScript%20notes/</id>
    <published>2021-11-15T04:26:46.622Z</published>
    <updated>2021-11-15T05:21:41.098Z</updated>
    
    <content type="html"><![CDATA[<p>===<br>板块制作中<br>===</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;===&lt;br&gt;板块制作中&lt;br&gt;===&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS笔记</title>
    <link href="https://godofl.github.io/2021/11/15/CSS%20notes/"/>
    <id>https://godofl.github.io/2021/11/15/CSS%20notes/</id>
    <published>2021-11-15T04:26:24.606Z</published>
    <updated>2021-11-15T05:21:42.258Z</updated>
    
    <content type="html"><![CDATA[<p>===<br>板块制作中<br>===</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;===&lt;br&gt;板块制作中&lt;br&gt;===&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="https://godofl.github.io/2021/11/15/HTML%20notes/"/>
    <id>https://godofl.github.io/2021/11/15/HTML%20notes/</id>
    <published>2021-11-15T04:26:10.914Z</published>
    <updated>2021-11-15T05:19:46.794Z</updated>
    
    <content type="html"><![CDATA[<p>===<br>板块制作中<br>===</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;===&lt;br&gt;板块制作中&lt;br&gt;===&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://godofl.github.io/2021/11/15/Python%20notes/"/>
    <id>https://godofl.github.io/2021/11/15/Python%20notes/</id>
    <published>2021-11-15T04:25:51.318Z</published>
    <updated>2021-11-19T10:27:11.636Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#FF0000>以下的程序都是在Python3下运行，主要是给自己看的，所以可能对读者不咋友好。</font></p><h1 id="变量和简单的数据类型"><a href="#变量和简单的数据类型" class="headerlink" title="变量和简单的数据类型"></a>变量和简单的数据类型</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在程序中可以随时修改变量的值，Python始终记录的是变量的最新值。<br>关于变量的命名与使用和C语言没什么区别，除了i与O要谨慎使用(可能会被看成1和0)。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>与C语言不同的是Python的字符串是用<strong>引号</strong>(<strong>单引号和双引号</strong>)扩起，看似简单，其实使用的方式有很多。</p><h3 id="修改字符串的大小写"><a href="#修改字符串的大小写" class="headerlink" title="修改字符串的大小写"></a>修改字符串的大小写</h3><p>使用<strong>title()函数</strong>，title()函数是将字符串里的每个单词首字母大写。title()函数括号里是空的是因为title()函数不需要提供额外的信息。<br>使用title()，使用代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;ada lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ada Lovelace</span><br></pre></td></tr></table></figure><p>还有两个函数upper()和lower()函数，与C语言不同的是这两个函数改的是<strong>整串</strong>字符串，用法与title()函数相同。</p><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>相比C语言，Python的字符串拼接大有不同，Python的字符串拼接不需要调用任何函数，可以直接用+号进行<strong>拼接</strong>。<br>字符串拼接的示例如下<br>示例一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(full_name)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><p>示例二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><p>示例三</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><p>Python提供<strong>strip()函数</strong>用于删除字符串中多余的空白，但删除空白是暂时的，如果想彻底删除，就要将删除后的新值重新存放回原来的变量中。<br>使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&quot; Alex &quot;</span></span><br><span class="line"></span><br><span class="line">my_name = my_name.strip()</span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alex</span><br></pre></td></tr></table></figure><p>还有<strong>lstrip()函数</strong>和<strong>rstrip()函数</strong>，前者用于删除字符串前的空格，后者用于删除字符串后的空格，strip()函数则是删除字符串里所有的空格。</p><h3 id="使用字符串时避免一些语法错误"><a href="#使用字符串时避免一些语法错误" class="headerlink" title="使用字符串时避免一些语法错误"></a>使用字符串时避免一些语法错误</h3><p>以下有两个示例<br>正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;One of Python&#x27;s strengths is its diverse community&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&#x27;One of Python&#x27;</span>s strengths <span class="keyword">is</span> its diverse community<span class="string">&#x27;        #错误原因是Python不能正确识别结束位置</span></span><br><span class="line"><span class="string">print(message)</span></span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>使用数字类型变量时无需定义，可以直接使用。<br>Python可以使用两个乘号表示乘方的运算。<br><strong>注意</strong>：Python中与浮点的计算结果中的小数位是不精确的！！！所以尽量避免整数与浮点比较。</p><h3 id="str-函数"><a href="#str-函数" class="headerlink" title="str()函数"></a>str()函数</h3><p>如果想将数字拼接进字符串中，则要使用该函数将数字转换为字符串，如果没有使用，则在运行时会引发错误。<br>该函数的使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd birthday&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy 23rd birthday</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python使用#号进行注释，#号后面的内容会被编译器忽略。</p><h1 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h1><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>我们不能直接对列表进行输出，因为会将列表内部表示的全打印，包括方括号。<br>访问列表方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>如果想访问全部，用循环。<br><strong>注意</strong>:从0开始！！！</p><h2 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h2><p>使用<strong>append()函数</strong>进行添加，添加到列表的末尾。<br>该函数使用方法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;,&#x27;ducati&#x27;]</span><br></pre></td></tr></table></figure><p>我们可以不在方括号里添加变量，创建一个空列表，空列表里的元素可以在程序运行后通过append()函数进行添加。<br>使用<strong>insert()函数</strong>可以在列表的任意位置添加元素，需要指定索引和值。<br>该函数的使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.insert(<span class="number">0</span>,<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;ducati&#x27;,&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><h2 id="在列表里删除元素"><a href="#在列表里删除元素" class="headerlink" title="在列表里删除元素"></a>在列表里删除元素</h2><p>使用<strong>del语句</strong>进行删除。<br>该语句使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>使用<strong>pop()函数</strong>将列表里的元素进行删除，专用术语<strong>弹出</strong>，弹出的是列表里末尾的元素。(即弹出栈顶元素)弹出的值可以被变量接收。<br>该函数使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">popped_motorcycles = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycles)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;]</span><br><span class="line">suzuki</span><br></pre></td></tr></table></figure><p>我们还可以在pop()函数中加入索引指定弹出列表中的某个元素。<br>注:关于del语句与pop()函数的使用判断标准:如果你不在使用列表中删除的元素，则使用del。如果你还想继续使用列表中删除的元素，则使用pop()。<br>如果不知道列表中元素的位置，则<strong>remove()函数</strong>可以删除列表里函数的值。<br>该函数的使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;,&#x27;ducati&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h3><p>如果想对一个乱序的列表进行永久性的排序，则需要用到<strong>sort()函数</strong>，如果想倒序，则需要在函数里添加参数reverse=Ture。<br>该函数的用法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;audi&#x27;,&#x27;bmw&#x27;,&#x27;subaru&#x27;,toyota]</span><br></pre></td></tr></table></figure><p>如果只想对列表进行临时排序，则使用<strong>sorted()函数</strong>，如果想倒序同上。<br>该函数的使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Here is the original list:</span><br><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br><span class="line"></span><br><span class="line">Here is the sorted list:</span><br><span class="line">[&#x27;audi&#x27;,&#x27;bmw&#x27;,&#x27;subaru&#x27;,toyota]</span><br><span class="line"></span><br><span class="line">Here is the original list again:</span><br><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br></pre></td></tr></table></figure><p>如果你想倒着打印列表，则使用<strong>reverse()函数</strong>。<br>该函数的使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br><span class="line">[&#x27;subaru&#x27;,&#x27;toyota&#x27;,&#x27;audi&#x27;,&#x27;bmw&#x27;]</span><br></pre></td></tr></table></figure><p>如果想恢复原来的列表，只需再次调用该函数。<br><strong>有与C语言数组不同的是Python里的索引可以用负数！</strong></p><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>如果你想遍历整个列表里的元素，则需要用到循环。Python的循环与C语言的循环写法大有不同，在遍历列表的循环里你可以不告诉循环什么时候截止。前面讲过Python的变量不需要定义即可使用，所以我们可以直接在循环语句里加入变量，但是这个变量是用来储存列表里的元素的。<br>Python的循环语句如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alice</span><br><span class="line">davd</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure><p>Python的循环会执行循环下面缩进的语句，没有进行缩进的语句则不会进入循环，同时也避免不必要的缩进。<br><strong>注意:不要遗漏了 : 号！！！</strong>，否则将导致语法错误。</p><h3 id="创建数字列表"><a href="#创建数字列表" class="headerlink" title="创建数字列表"></a>创建数字列表</h3><p>使用<strong>range()函数</strong>可以轻松生成一系列数字，还可以指定步长。<br>使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>range()函数指定步长使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>使用该函数生成数字时出现在编程语言中差一行的结果，如果出现不符合预期，则可以尝试将指定的值加1或者减1。<br>使用<strong>list()函数</strong>可以直接将<strong>range()函数</strong>的结果直接转换为列表<br>使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>在Python中可以使用空列表，如以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)            <span class="comment">#在Python中两个**代表乘方运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,4,9,16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure><p>Python中提供<strong>min()函数，max()函数和sum()函数等</strong>，直接处理数字列表。</p><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><p>在欣赏别人的代码时，可能会出现以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><p>这个代码将for循环和创建新元素的代码合并成一行，并自动附加新元素，该情况有个专有名词叫<strong>列表解析</strong>，与上面循环不同的是，这个循环<strong>没有 : 号</strong>。</p><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>处理列表里的部分元素，在Python中被称为<strong>切片</strong>。<br>我们在列表中增加索引，既可创建切片，示例如下<br>示例一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;charles&#x27;,&#x27;martina&#x27;,&#x27;micheal&#x27;]</span><br></pre></td></tr></table></figure><p>示例二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;martina&#x27;,&#x27;micheal&#x27;,&#x27;florence&#x27;]</span><br></pre></td></tr></table></figure><p>示例三</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;charles&#x27;,&#x27;martina&#x27;,&#x27;micheal&#x27;,&#x27;florence&#x27;]</span><br></pre></td></tr></table></figure><p>示例四</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;micheal&#x27;,&#x27;florence&#x27;,&#x27;eli&#x27;]</span><br></pre></td></tr></table></figure><p>示例五</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;micheal&#x27;,&#x27;florence&#x27;,&#x27;eli&#x27;]</span><br></pre></td></tr></table></figure><p>总结，没有指定第一个索引时，列表重头开始，没有指定第二个索引时，列表在末尾终止，列表的索引用负数，则表示列表从末尾开始的后几个元素。</p><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>我们经常需要根据既有列表创建全新列表，那么列表的复制对我们则尤为重要了，复制整个列表的方法为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_food = my_food[:]                    <span class="comment">#错误写法friend_food = my_food</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure><p>既省略起始索引和终止索引。<br>复制部分列表，我就不再举例了。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><p>元组用于存放一系列不可修改的元素。<br>如何定义元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure><p>元组看似像列表，但使用的却是圆括号而不是方括号，访问元组里的元素和访问列表里的元素方法一样。</p><h3 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h3><p>这个属实是把我震惊到了，储存元组的变量还能被再次赋值，操作如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Original dimension:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line"></span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>这么说来，我们可以重新定义整个元组。</p><h3 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h3><p>这个为程序员的自我修养，上网查吧，小可爱们。</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>和C语言的差不多，就是不用加括号而已，看着看着就会用了。</p><h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><p>每条if语句的核心都是一个值为Ture或False的表达式(bool表达式)，这种表达式被称为条件测试，普通的比较那些我就不记上了，因为是个人都会比大小(doge)。</p><h3 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h3><p>在Python里直接用and和or来进行，以下的示例代码我都以提高可读性去写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(age_0 &gt;= <span class="number">21</span>) <span class="keyword">and</span> (age_1 &gt;= <span class="number">21</span>)</span><br><span class="line">(age_0 &gt;= <span class="number">21</span>) <span class="keyword">or</span> (age_1 &gt;= <span class="number">21</span>)</span><br></pre></td></tr></table></figure><h3 id="检查特定值在不在列表内"><a href="#检查特定值在不在列表内" class="headerlink" title="检查特定值在不在列表内"></a>检查特定值在不在列表内</h3><p>以下两个示例十分清楚的展示了如何检查<br>示例一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">football_players = [<span class="string">&#x27;Ronaldo&#x27;</span>,<span class="string">&#x27;Messi&#x27;</span>,<span class="string">&#x27;Neymar&#x27;</span>]</span><br><span class="line">mvp = <span class="string">&#x27;Messi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mvp <span class="keyword">in</span> football_players:</span><br><span class="line">    <span class="built_in">print</span>(mvp + <span class="string">&quot; you are the Golden Globe winner!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Messi you are the Golden Globe winner</span><br></pre></td></tr></table></figure><p>示例二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">football_players = [<span class="string">&#x27;Ronaldo&#x27;</span>,<span class="string">&#x27;Messi&#x27;</span>,<span class="string">&#x27;Neymar&#x27;</span>]</span><br><span class="line">before = <span class="string">&#x27;Maradona&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> before <span class="keyword">not</span> <span class="keyword">in</span> football_players:</span><br><span class="line">    <span class="built_in">print</span>(before + <span class="string">&quot;, he is history&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maradona, he is history</span><br></pre></td></tr></table></figure><h2 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h2><h3 id="if简单的用法"><a href="#if简单的用法" class="headerlink" title="if简单的用法"></a>if简单的用法</h3><p>参考前面的程序，不做过多介绍。</p><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><p>用一小段代码简单介绍一下用法<br>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">19</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry,you are too young to vote.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 19!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sorry,you are too young to vote.</span><br><span class="line">Please register to vote as soon as you turn 19!</span><br></pre></td></tr></table></figure><h3 id="if-elif-else结构"><a href="#if-elif-else结构" class="headerlink" title="if-elif-else结构"></a>if-elif-else结构</h3><p>如果检查的对象超过两个时，则使用该结构，该结构会检查每个测试条件，知道遇到通过的测试条件，执行紧跟的代码，并跳过余下的测试。<br>该结构的使用方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your admission cost is $5</span><br></pre></td></tr></table></figure><p>我们可以根据需要使用任意数量的elif代码块，有时为了安全起见，我们可以省略else代码块来避免无效数据与而恶意数据。</p><h3 id="测试多个条件"><a href="#测试多个条件" class="headerlink" title="测试多个条件"></a>测试多个条件</h3><p>if-elif-else结构虽然强大，但是只适用于测试一个特定的条件。如果要检查我们所有关心的条件，我们则需要使用多个if语句，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding mushrooms.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding pepperoni.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;extra cheese&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding extra cheese.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms</span><br><span class="line">Adding extra cheese</span><br><span class="line"></span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure><p>if-elif-else结构测试的条件只要满足就会执行相应的代码块，并跳过余下的测试，所以在这个程序里不能使用该结构。</p><h3 id="用if语句处理列表"><a href="#用if语句处理列表" class="headerlink" title="用if语句处理列表"></a>用if语句处理列表</h3><h3 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h3><p>用一小段代码教大家如何使用。<br>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping == <span class="string">&#x27;green papper&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we are out of green peppers right now.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms.</span><br><span class="line">Sorry, we are out of green peppers right now.</span><br><span class="line">Adding extra cheese.</span><br><span class="line"></span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure><h3 id="确定列表不为空"><a href="#确定列表不为空" class="headerlink" title="确定列表不为空"></a>确定列表不为空</h3><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want a plain pizza?</span><br></pre></td></tr></table></figure><h3 id="使用多个列表"><a href="#使用多个列表" class="headerlink" title="使用多个列表"></a>使用多个列表</h3><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">available_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;olives&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;pepperoni&#x27;</span>,<span class="string">&#x27;pineapple&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;french fries&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we don&#x27;t have &quot;</span> + requested_topping + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms.</span><br><span class="line">Sorry we don&#x27;t have french fries.</span><br><span class="line">Adding extra cheese.</span><br><span class="line"></span><br><span class="line">Finish making your pizza!</span><br></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><p>字典是<strong>一系列键-值对</strong>，用{}括号括起，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;point&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>访问字典，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">green</span><br></pre></td></tr></table></figure><p>返回的是与键相关的值。</p><h3 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h3><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5,&#x27;x_position&#x27;: 0,&#x27;y_position&#x27;: 25&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=#FF0000&gt;以下的程序都是在Python3下运行，主要是给自己看的，所以可能对读者不咋友好。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;变量和简单的数据类型&quot;&gt;&lt;a href=&quot;#变量和简单的数据类型&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>电脑装机</title>
    <link href="https://godofl.github.io/2021/11/14/Computer%20installation%20notes/"/>
    <id>https://godofl.github.io/2021/11/14/Computer%20installation%20notes/</id>
    <published>2021-11-14T10:59:58.215Z</published>
    <updated>2021-11-14T14:34:57.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本装机步骤"><a href="#基本装机步骤" class="headerlink" title="基本装机步骤"></a>基本装机步骤</h1><h2 id="机箱内"><a href="#机箱内" class="headerlink" title="机箱内"></a>机箱内</h2><h3 id="CPU和主板"><a href="#CPU和主板" class="headerlink" title="CPU和主板"></a>CPU和主板</h3><h4 id="锐龙CPU"><a href="#锐龙CPU" class="headerlink" title="锐龙CPU"></a>锐龙CPU</h4><p>先打开金属把手，CPU引脚面的一个金属三角与主板CPU底座的左上角对齐，然后将CPU<strong>平稳放下</strong>，放好后<strong>上下晃动</strong>一下CPU确保安装到位，再扣回金属把手。</p><h4 id="英特尔CPU"><a href="#英特尔CPU" class="headerlink" title="英特尔CPU"></a>英特尔CPU</h4><p>与锐龙不同的是有个保护盖，引脚比较脆弱得注意，CPU的豁口与主板接口的两个突起对齐，装完后保护盖要拿走。</p><h3 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h3><p>有些主板只能开一边卡扣，有的两个都要开，看清楚主板，内存条的豁口对齐内存插槽中间的突起，对齐后双手按压两边，直到卡扣自动扣合。(<strong>务必确保内存条插到底，否则会出现开不了机</strong>)</p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><p>有两个螺丝一个固定硬盘的小螺丝，一个为螺丝柱，在装固态时确保安装固态的地方只有螺丝柱，不能有螺丝。(参考<a href="https://www.bilibili.com/video/BV1jE411e7hw?from=search&seid=4568261125494299823&spm_id_from=333.337.0.0">bilibili【装机教程】05:48</a>)目前大部分主板都是右边豁口的M-Key固态硬盘接口，螺丝不要拧太紧，点到为止。(高端主板则有散热片(参考<a href="https://www.bilibili.com/video/BV1jE411e7hw?from=search&seid=4568261125494299823&spm_id_from=333.337.0.0">bilibili【装机教程】06:58</a>))</p><h3 id="散热器"><a href="#散热器" class="headerlink" title="散热器"></a>散热器</h3><p>版本过多，自己上网查。。。。。</p><h2 id="机箱外侧"><a href="#机箱外侧" class="headerlink" title="机箱外侧"></a>机箱外侧</h2><h3 id="IO挡板"><a href="#IO挡板" class="headerlink" title="IO挡板"></a>IO挡板</h3><p>安装时突起要卡在安装IO挡板的地方，要弄到卡死。</p><h3 id="主板的安装"><a href="#主板的安装" class="headerlink" title="主板的安装"></a>主板的安装</h3><p><strong>绝对禁止主板直接贴着机箱</strong>，要悬空架在机箱托盘上，安装时首先要确保机箱与主板的螺丝孔相一致，少一就不行，拧的时候不能拧太紧，点到为止。</p><h3 id="电源安装"><a href="#电源安装" class="headerlink" title="电源安装"></a>电源安装</h3><p>看机箱有没有进风口，如果有就将电源风扇对准进风口，如果没有就对准上面，螺丝固定。(看机箱而定。。。。。另一种情况参考<a href="https://www.bilibili.com/video/BV1jE411e7hw?from=search&seid=4568261125494299823&spm_id_from=333.337.0.0">bilibili【装机教程】17:29</a>)</p><hr><h2 id="未完待续bilibili【装机教程】18-25"><a href="#未完待续bilibili【装机教程】18-25" class="headerlink" title="未完待续bilibili【装机教程】18:25"></a>未完待续<a href="https://www.bilibili.com/video/BV1jE411e7hw?from=search&seid=4568261125494299823&spm_id_from=333.337.0.0">bilibili【装机教程】18:25</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本装机步骤&quot;&gt;&lt;a href=&quot;#基本装机步骤&quot; class=&quot;headerlink&quot; title=&quot;基本装机步骤&quot;&gt;&lt;/a&gt;基本装机步骤&lt;/h1&gt;&lt;h2 id=&quot;机箱内&quot;&gt;&lt;a href=&quot;#机箱内&quot; class=&quot;headerlink&quot; title=&quot;机箱内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言笔记</title>
    <link href="https://godofl.github.io/2021/11/13/C%20programing%20notes/"/>
    <id>https://godofl.github.io/2021/11/13/C%20programing%20notes/</id>
    <published>2021-11-13T14:44:59.826Z</published>
    <updated>2021-11-19T04:31:36.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><strong>学长分享了一段话给我，这段话对你们学习递归非常有帮助:</strong><br><strong>递归:</strong><br><strong>如果你不懂得什么是递归，请参考递归。</strong></p><h1 id="字符串IO"><a href="#字符串IO" class="headerlink" title="字符串IO"></a>字符串IO</h1><h2 id="gets-函数和puts-函数"><a href="#gets-函数和puts-函数" class="headerlink" title="gets()函数和puts()函数"></a>gets()函数和puts()函数</h2><h3 id="gets-函数"><a href="#gets-函数" class="headerlink" title="gets()函数"></a>gets()函数</h3><p>gets()函数简单易用，遇到换行符会丢弃换行符，储存其他字符。</p><h3 id="puts-函数"><a href="#puts-函数" class="headerlink" title="puts()函数"></a>puts()函数</h3><p>puts()函数常和gets()函数配对使用，该函数会在结尾添加换行符。</p><p>以下代码将简单的告诉我们两个函数的用法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STLEN 81</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> words[STLEN];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter a string, please.&quot;</span>);</span><br><span class="line">    gets(words);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your string twice:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,words);</span><br><span class="line">    <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是某些编译器的运行示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enter a string, please.</span><br><span class="line">I want to learn about string theory!          //输入</span><br><span class="line">Your string twice:</span><br><span class="line">I want to learn about string theory!</span><br><span class="line">I want to learn about string theory!</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>另一个编译器的运行示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Enter a string, please.</span><br><span class="line">warning: this program uses gets(), witch is unsafe.</span><br><span class="line">Oh, no!                                              //输入</span><br><span class="line">Your string twice:</span><br><span class="line">Oh, no!</span><br><span class="line">Oh, no!</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>出现该现象的原因是因为gets()函数不会检查数组是否装的下一行，输入过长的数组会导致<strong>缓冲区溢出</strong>(<em><strong>buffer overflow</strong></em>)，多余的字符可能会占用已经使用的内存，导致程序异常终止。(C11标准中废除了gets()函数)。</p><h2 id="fgets-函数和fputs-函数"><a href="#fgets-函数和fputs-函数" class="headerlink" title="fgets()函数和fputs()函数"></a>fgets()函数和fputs()函数</h2><h3 id="fgets-函数"><a href="#fgets-函数" class="headerlink" title="fgets()函数"></a>fgets()函数</h3><p>fgets()函数可以输入三个参数：<br>①第二个参数指明读入字符的最大数量，假设参数为n，那么将读入n-1个字符，或者读入到一个换行符为止。<br>②第三个参数指明要<strong>读入</strong>的文件，如果从键盘中读取数据，则以stdin作为参数。<br>③fgets()函数会读取换行符，而不是丢弃。</p><h3 id="fputs-函数"><a href="#fputs-函数" class="headerlink" title="fputs()函数"></a>fputs()函数</h3><p>fgets()函数可以输入两个参数:<br>①第二个参数指明要<strong>写入</strong>的文件，如果想显示在屏幕上，应使用stdout作为参数。<br>②通常与fgets()函数配对使用。<br>以下两个代码将简单告诉我们两个函数的用法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STLEN 14</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> words[STLEN];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter a string, please.&quot;</span>);</span><br><span class="line">    fgets(words,STLEN,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your string twice (puts(), then fputs()):\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">fputs</span>(words,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter another string, please.&quot;</span>);</span><br><span class="line">    fgets(words,STLEN,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Your string twice (puts(), then fputs()):\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">fputs</span>(words,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为该程序的输出示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Enter a string, please.</span><br><span class="line">apple pie                                  //输入</span><br><span class="line">Your string twice (puts(), then fputs()):</span><br><span class="line">apple pie</span><br><span class="line"></span><br><span class="line">apple pie</span><br><span class="line">Enter another string, please.</span><br><span class="line">strawberry shortcake                       //输入</span><br><span class="line">Your string twice (puts(), then fputs()):</span><br><span class="line">strawberry sh</span><br><span class="line">strawberry shDone.</span><br></pre></td></tr></table></figure><p>第一次的输入结果就不说了，第二次结果是因为输入的字符串超过了大小限制，所以只读入了未超过限制的字符。<br>注意：fgets()函数在读到文件末尾时，会返回<strong>空指针<a href="%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%BA%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%EF%BC%8C%E7%A9%BA%E6%8C%87%E9%92%88%E4%B8%BA%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E3%80%82">^1</a></strong>(<em><strong>null pointer</strong></em>),可以用数字0代替，在C语言中用宏NULL代替更常见。</p><h2 id="gets-s-函数"><a href="#gets-s-函数" class="headerlink" title="gets_s()函数"></a>gets_s()函数</h2><h3 id="gets-s-函数-1"><a href="#gets-s-函数-1" class="headerlink" title="gets_s()函数"></a>gets_s()函数</h3><p>gets_s函数只有两个参数:<br>①因为gets_s只从标准输入中读取数据，所以不用第三个参数<br>②gets_s读取到换行符回将其丢弃<br>③如果gets_s没有读取到换行符，则会把目标数组中的首字符设置为空字符，读取并丢弃随后的输入直至读到换行符或者文件结尾，然后返回空指针，接着调用依赖实现的”处理函数”(或你选择的其他函数)，也可能会中止或者推出程序。<br><strong>该函数为C库可选扩展</strong>，有兴趣的可以进行深入学习。<br>以下代码简单告诉该函数的一种用法:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">s_gets</span><span class="params">(<span class="keyword">char</span> *st,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ret_val;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ret_val = fgets(st,n,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(st[i] != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; st[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(st[i] == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            st[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span>(getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="scanf-函数"><a href="#scanf-函数" class="headerlink" title="scanf()函数"></a>scanf()函数</h2><p>scanf()函数遇到空白字符(空行，空格，制表符或者换行符)时结束，所以scanf()函数非常像读取单词的函数。<br>下列表格简单的介绍scanf()函数的读取情况<br>|输入语句|输入序列|变量中的内容|剩余输入序列|<br>|-|-|-|-|<br>|scnaf(“%s”,name);|Fleebert Hup|Fleebert| Hup|<br>|scnaf(“%5s”,name);|Fleebert Hup|Fleeb|ert Hup|<br>|scnaf(“%5s”,name);|Ann Ular|Ann| Ular|</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数调用&quot;&gt;&lt;a href=&quot;#函数调用&quot; class=&quot;headerlink&quot; title=&quot;函数调用&quot;&gt;&lt;/a&gt;函数调用&lt;/h1&gt;&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h</summary>
      
    
    
    
    
  </entry>
  
</feed>
