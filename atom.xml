<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My World</title>
  
  
  <link href="https://godofl.github.io/atom.xml" rel="self"/>
  
  <link href="https://godofl.github.io/"/>
  <updated>2022-06-19T07:17:08.705Z</updated>
  <id>https://godofl.github.io/</id>
  
  <author>
    <name>GODOFL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暑假120道力扣算法题讲解(前60道)</title>
    <link href="https://godofl.github.io/2022/06/08/120%E9%81%93%E7%AE%97%E6%B3%95/"/>
    <id>https://godofl.github.io/2022/06/08/120%E9%81%93%E7%AE%97%E6%B3%95/</id>
    <published>2022-06-08T12:05:10.954Z</published>
    <updated>2022-06-19T07:17:08.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑假120道力扣算法题讲解"><a href="#暑假120道力扣算法题讲解" class="headerlink" title="暑假120道力扣算法题讲解"></a>暑假120道力扣算法题讲解</h1><h2 id="两数求和"><a href="#两数求和" class="headerlink" title="两数求和"></a>两数求和</h2><p>给定一个整数数组nums和一个整数目标值target，请在该数组中找出和为目标值target的那两个整数，并返回它们的数组下标。<br>可以假设每种输入只会对应一个答案，但是，数组中同一个元素在答案里不能重复出现。<br>可以按任意顺序返回答案。</p><p>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2, 7, 11, 15], targer = 9</span><br><span class="line">输出：[0, 1]</span><br><span class="line">解释：因为nums[0] + nums[1] == 9, 返回[0, 1]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3, 2, 4], target = 6</span><br><span class="line">输出：[1, 2]</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></p><p>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本题直接使用暴力枚举莫得问题，原因计算量不大</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, *ret;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; numsSize<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>;j &lt; numsSize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[j] == target)                    <span class="comment">//如果数组中有两数相加之和等于target</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> *ret = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);       <span class="comment">//定义一个新数组，用于存放结果</span></span><br><span class="line">                ret[<span class="number">0</span>] = i;</span><br><span class="line">                ret[<span class="number">1</span>] = j;</span><br><span class="line">                *returnSize = <span class="number">2</span>;                               <span class="comment">//返回数组大小</span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = <span class="number">0</span>;                                          <span class="comment">//如果没有则数组大小等于0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;                                              <span class="comment">//返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h2><p>给两个<strong>非空</strong>链表，表示两个非负的整数。它们每位数字都是按照<strong>逆序</strong>的方式存储的，并且每个节点只能存储以为数字。<br>请将两个数相加，并以相同形式返回一个表示的链表。<br>可以假设除了数字0之外，这两个数都不会以0开头。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2, 4, 3], l2 = [5, 6, 4]</span><br><span class="line">输出：[7, 0, 8]</span><br><span class="line">解释：342 + 465 = 807</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">head</span> =</span> <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1 || l2)                                            <span class="comment">//判断两个链表不为NULL</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n1 = l1 ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n2 = l2 ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = n1 + n2 + front;                            <span class="comment">//计算每位数相加的和，front表示上一位数的进位</span></span><br><span class="line">        <span class="keyword">if</span>(!head)                                             <span class="comment">//链表的基本操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            head = p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">            p-&gt;val = sum%<span class="number">10</span>;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            p-&gt;val = sum%<span class="number">10</span>;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        front = sum/<span class="number">10</span>;                                       <span class="comment">//计算下一位数的进位</span></span><br><span class="line">        <span class="keyword">if</span>(l1)                                                <span class="comment">//分开判断链表是否为NULL，避免出现某一个链表为NULL，另一个链表不为NULL的情况</span></span><br><span class="line">            l1 = l1-&gt;next;                                    <span class="comment">//指向下一位</span></span><br><span class="line">        <span class="keyword">if</span>(l2)</span><br><span class="line">            l2 = l2-&gt;next;                                    <span class="comment">//指向下一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front &gt; <span class="number">0</span>)                                             <span class="comment">//如果结果计算结束后还有进位，则新增链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        p-&gt;val = front;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="Z型转换"><a href="#Z型转换" class="headerlink" title="Z型转换"></a>Z型转换</h2><p>将一个给定字符串s根据给定的行数numRows，以从上往下、从左往右进行Z字形排列。<br>比如输入字符串为“PAYPALISHRING”行数为3时，排列如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><br>之后，输出需要从左往右逐行读取，产生一个新的字符串，比如：“PAHNAPLSIIGYIR”<br>请实现这个字符串进行行数变换的函数：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string covert(string s, int numRows)</span><br></pre></td></tr></table></figure><br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出：&quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释：</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;A&quot;, numRows = 1</span><br><span class="line">输出：&quot;A&quot;</span><br></pre></td></tr></table></figure><br>解释：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">convert</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> numRows)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k, mid = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(numRows == <span class="number">1</span> || numRows &gt;= n)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    <span class="type">char</span> **result = (<span class="type">char</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span> *) * numRows);                    <span class="comment">//分配二维数组的行数</span></span><br><span class="line">    <span class="type">int</span> *columSize = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * numRows);                        <span class="comment">//</span></span><br><span class="line">    <span class="built_in">memset</span>(columSize, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * numRows);                                  </span><br><span class="line">    <span class="comment">/*memset()函数第一个参数是要填充的内存块，第二参数是要填充的值（填充的是该值的无符号整型的形式），第三个是要被设置为该值的字符数，灵活使用memset()函数可以在某些程序中为你节省不少空间*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numRows; i++)                                                  <span class="comment">//分配二维数组的列数</span></span><br><span class="line">    &#123;</span><br><span class="line">        result[i] = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (n + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">memset</span>(result[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, j = <span class="number">0</span>, k = numRows * <span class="number">2</span> - <span class="number">2</span>; i &lt; n; ++i)                            <span class="comment">//使用新数组存储z型排序后的字符串，k是z型排列的一个周期</span></span><br><span class="line">    &#123;</span><br><span class="line">        result[j][colunSize[j]++] = s[i];</span><br><span class="line">        i % k &lt; numRows - <span class="number">1</span> ? ++j : --j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; numRows; i++)                                                  <span class="comment">//将排序好的字符串存储在原字符串中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; columSize[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            s[mid++] = result[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(result[i]);                                                          <span class="comment">//释放二维数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(columSize);                                                              <span class="comment">//释放一维数组</span></span><br><span class="line">    <span class="built_in">free</span>(result);                                                                 <span class="comment">//释放一维数组</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>给一个32为的有符号整数x，返回将x中的数字部分反转后的结果。<br>如果反转后整数超过32位的有符号整数范围$[-2^{31}, 2^{31}-1]$，就返回0。<br>假设环境不允许存储64位整数（有符号或无符号）<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><br>示例4：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)                                                              <span class="comment">//判断x不为0，进入循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(result &lt; INT_MIN / <span class="number">10</span> || result &gt; INT_MAX / <span class="number">10</span>)                     <span class="comment">//此处的判断看下面详情</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = <span class="number">0</span>;                                                           <span class="comment">//正常取反流程</span></span><br><span class="line">        mid = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        result = result * <span class="number">10</span> + mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>详情（只说大于0的情况，小于0自己可以推出）：在C语言中INT_MAX在正整数存储的最大值为$2^{31}-1$，反转后的数字首位为7，如果想要反转的结果成立则：<br>当resul = [INT_MAX/10]时，只有当mid&lt;=7时候，结果才成立。<br>当resul &lt; [INT_MAX/10]时，只有当mid&lt;=9时候，结果才成立。<br>当resul &gt; [INT_MAX/10]时，不论最后的位置是多少，结果都不成立。</p><h2 id="删除链表的倒数第n个节点"><a href="#删除链表的倒数第n个节点" class="headerlink" title="删除链表的倒数第n个节点"></a>删除链表的倒数第n个节点</h2><p>给一个链表，删除链表的倒数第n个节点，并返回头节点。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">removeNthFromEnd</span><span class="params">(<span class="keyword">struct</span> ListNode *head, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">temp</span> =</span> head;                                        <span class="comment">//使用一个中间指针，避免函数在执行的过程中修改头指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">mid</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));              <span class="comment">//创建新节点代替头节点，避免头节点被删除的情况</span></span><br><span class="line">    mid-&gt;val = <span class="number">0</span>, mid-&gt;next = head;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="literal">NULL</span>)                                                  <span class="comment">//计算链表长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; count - n; ++i)                                    <span class="comment">//将指针移动到要删除的节点的前一个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next = temp-&gt;next-&gt;next;                                         <span class="comment">//删除节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">Last</span> =</span> mid-&gt;next;                                     <span class="comment">//获取头节点</span></span><br><span class="line">    <span class="built_in">free</span>(mid);                                                             <span class="comment">//释放中间节点</span></span><br><span class="line">    <span class="keyword">return</span> Last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><p>（艹，真得花时间思考C语言的要怎么写，不把注释的题放出来，git上传后看不到后面的题目，好离谱）<br>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点构成的<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> ListNode *list1, <span class="keyword">struct</span> ListNode *list2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p1</span> =</span> list1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p2</span> =</span> list2;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">new</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    new-&gt;val = <span class="number">0</span>, new-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">mid</span> =</span> new;</span><br><span class="line">    <span class="keyword">while</span>(p1 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = p1-&gt;next;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    mid-&gt;next = p2;</span><br><span class="line">    <span class="keyword">while</span>(p2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = mid-&gt;next;</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">Last</span> =</span> new-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> Last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="两两交换链表中的节点（迭代好做）"><a href="#两两交换链表中的节点（迭代好做）" class="headerlink" title="两两交换链表中的节点（迭代好做）"></a>两两交换链表中的节点（迭代好做）</h2><p>给一个链表，两两交换其中相邻的节点，并返回头节点。必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><br>解释：（迭代）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">swapPairs</span><span class="params">(<span class="keyword">struct</span> ListNode *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> <span class="title">temp</span>;</span>                               <span class="comment">//创建一个哑节点，省略头节点为空的情况处理</span></span><br><span class="line">    temp.next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">mid</span> =</span> &amp;temp;</span><br><span class="line">    <span class="keyword">while</span>(mid-&gt;next != <span class="literal">NULL</span> &amp;&amp; mid-&gt;next-&gt;next != <span class="literal">NULL</span>)  <span class="comment">//依次将两个节点交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p1</span> =</span> mid-&gt;next;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p2</span> =</span> mid-&gt;next-&gt;next;</span><br><span class="line">        mid-&gt;next = p2;</span><br><span class="line">        p1-&gt;next = p2-&gt;next;</span><br><span class="line">        p2-&gt;next = p1;</span><br><span class="line">        mid = p1;                                        <span class="comment">//这里的p1其实已经是p2了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.next;                                    <span class="comment">//不返回head是为头节点已经被修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最长有序括号（这题我还得多思考思考）"><a href="#最长有序括号（这题我还得多思考思考）" class="headerlink" title="最长有序括号（这题我还得多思考思考）"></a>最长有序括号（这题我还得多思考思考）</h2><p>给一个只包含”(“和”)”的字符串，找出最长有效（格式正确且连续）括号子串的长度<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(()&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：最长有效括号子串是 &quot;()&quot;</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;)()())&quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&quot;</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><br>解析：（动态规划）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(<span class="type">char</span> * s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>, count = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dp[count];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span> ,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)                                                    <span class="comment">//判断是否是右括号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)                                            <span class="comment">//判断是否满足一个完整的括号</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;                      <span class="comment">//如果满足条件就在动态规划的数组中加入一个值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s[i - dp[i - <span class="number">1</span>] - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + ((i - dp[i - <span class="number">1</span>]) &gt;= <span class="number">2</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            max = fmax(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;                                                             <span class="comment">//返回最长有效括号的最大值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a>搜索插入位置</h2><p>给一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不在数组中，返回它将会被按顺序插入的位置。<br>使用时间复杂度为0（log n） 的算法<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><br>解析：（二分查找，偷个懒，详情参考<a href="https://www.runoob.com/cprogramming/c-sort-algorithm.html">菜鸟教程</a>）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize - <span class="number">1</span>, result, mid;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt;= nums[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            result = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h2><p>给一个整数数组nums，找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>子数组：数组中的一个连续部分。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><br>解析：（动态规划，滚动数组）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = fmax(sum + nums[i], nums[i]);</span><br><span class="line">        <span class="comment">/*因为是子数组，所以可以直接省略掉不相邻数之间的和，转变为第一个数与第二数相加是否大于第二数的子问题*/</span></span><br><span class="line">        max = fmax(max, sum);             <span class="comment">//求最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;                     <span class="comment">//返回最大值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><p>给一个链表的头节点head和一个整数val，请删除链表中所有满足Node.val == val 节点，并返回头节点。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例3:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">removeElements</span><span class="params">(<span class="keyword">struct</span> ListNode* head, <span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">temp</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));                 <span class="comment">//创建一个哑节点，避免处理头节点为空的边界问题的作用</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">mid</span>;</span></span><br><span class="line">    temp-&gt;next = head;</span><br><span class="line">    mid = temp;</span><br><span class="line">    <span class="keyword">while</span>(mid-&gt;next != <span class="literal">NULL</span>)                                                 <span class="comment">//当链表不为空时，leetcode在这里报错了，好奇怪通过不了，淦！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mid-&gt;next-&gt;val == val)                                            <span class="comment">//判断是否对于val值</span></span><br><span class="line">        &#123;</span><br><span class="line">            mid-&gt;next = mid-&gt;next-&gt;next;                                     <span class="comment">//等于则删除该节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        mid = mid-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid-&gt;next;                                                        <span class="comment">//返回头节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>给单链表的头节点head，请反转链表，并返回反转后的链表。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><br>示例3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>解析：（迭代）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">pre</span> =</span> <span class="literal">NULL</span>;                      <span class="comment">//创建一个空节点，用于存储上一个节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> head;                      <span class="comment">//创建一个非空节点，存储头节点</span></span><br><span class="line">    <span class="keyword">while</span>(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span> =</span> cur-&gt;next;            <span class="comment">//创建一个节点，存储下一个节点</span></span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="完全平方数"><a href="#完全平方数" class="headerlink" title="完全平方数"></a>完全平方数</h2><p>给一个整数n，返回和为n的完全平方数的最少数量。<br>完全平方数是一个整数，其值时等于另一个整数的平方。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：3 </span><br><span class="line">解释：12 = 4 + 4 + 4</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：2</span><br><span class="line">解释：13 = 4 + 9</span><br></pre></td></tr></table></figure><br>解析：（动态规划）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min = INT_MAX;                          <span class="comment">//避免了声明变量时，变量随机的情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j * j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            min = fmin(min, dp[i - j * j]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = min + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h2><p>给一个n*n的二维矩阵matrix表示一个图像，请将图像顺时针转90度。<br>必须在原地旋转图像，不能使用另一个矩阵来记录结果。<br>示例1：<br>$\begin{matrix}<br>1&amp;2&amp;3\<br>4&amp;5&amp;6\<br>7&amp;8&amp;9\<br>\end{matrix}<br>$<br>变为<br>$\begin{matrix}<br>7&amp;4&amp;1\<br>8&amp;5&amp;2\<br>9&amp;6&amp;3\<br>\end{matrix}<br>$<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span><br><span class="line">输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span> **matrix, <span class="type">int</span> matrixSize, <span class="type">int</span> *matrixColSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> new_matrix[matrixSize][matrixSize];                 <span class="comment">//新建一个二维数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrixSize; i++)                     <span class="comment">//新二维数组保存旧数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; matrixSize; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            new_matrix[i][j] = matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrixSize; ++i)                         <span class="comment">//将新数组中的值赋值给翻转后的数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; matrixSize; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[j][matrixSize - i - <span class="number">1</span>] = new_matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="对链表进行插入排序"><a href="#对链表进行插入排序" class="headerlink" title="对链表进行插入排序"></a>对链表进行插入排序</h2><p>给定单个链表的头head，使用插入排序对链表进行排序，并返回排序后链表的头。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [4,2,1,3]</span><br><span class="line">输出: [1,2,3,4]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [-1,5,3,4,0]</span><br><span class="line">输出: [-1,0,3,4,5]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">insertionSortList</span><span class="params">(<span class="keyword">struct</span> ListNode *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)                                <span class="comment">//开头的判断就不说了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">temp</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));              <span class="comment">//创建一个哑节点，此处是方便在头节点前插入节点，之前写过一个是避免头节点为空的情况</span></span><br><span class="line">    temp-&gt;val = <span class="number">0</span>;</span><br><span class="line">    temp-&gt;next = head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">nextList</span> =</span> head;                                     <span class="comment">//创建一个结构体指针用于保存头节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span> =</span> head-&gt;next;                                    <span class="comment">//再次创建一个结构体指针用于保存头节点的下一个节点</span></span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)                                                    <span class="comment">//开始遍历链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nextList-&gt;val &lt;= cur-&gt;val)                                    <span class="comment">//如果头节点里的值小于或等于下一个节点里的值</span></span><br><span class="line">        &#123;</span><br><span class="line">            nextList = nextList-&gt;next;                                   <span class="comment">//节点后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                                                             <span class="comment">//如果小于</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">struct</span> ListNode *before = temp;                              <span class="comment">//再次创建一个节点保存哑节点</span></span><br><span class="line">            <span class="keyword">while</span>(before-&gt;next-&gt;val &lt;= cur-&gt;val)                         <span class="comment">//寻找可插入节点</span></span><br><span class="line">            &#123;</span><br><span class="line">                before = before-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            nextList-&gt;next = cur-&gt;next;                                  <span class="comment">//插入节点</span></span><br><span class="line">            cur-&gt;next = before-&gt;next;</span><br><span class="line">            before-&gt;next = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur= nextList-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp-&gt;next;                                                   <span class="comment">//返回头节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h2><p>给一个升序排序的数组nums，请原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相应顺序应该保持一致。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(numsSize == <span class="number">0</span>)                         <span class="comment">//判断不说</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">1</span>, q = <span class="number">1</span>;                         <span class="comment">//创建两个标志变量，一个用于标志当前位置的数字，另一个标志下一个位置的数字</span></span><br><span class="line">    <span class="keyword">while</span>(q &lt; numsSize)                       <span class="comment">//前一个不能超过数组的长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[q] != nums[q <span class="number">-1</span>])             <span class="comment">//判断q标志的数字和q标志的上一个数字是否相等</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums[p] = nums[q];                <span class="comment">//如果不相等，则将q标志的变量赋值给p标志的变量</span></span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">        ++q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;                                  <span class="comment">//返回数组前p个已经不重复的数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a>旋转链表</h2><p>给一个链表的头头节点head，旋转链表，将链表每个节点向右移动k个位置。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 2</span><br><span class="line">输出：[4,5,1,2,3]</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [0,1,2], k = 4</span><br><span class="line">输出：[2,0,1]</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode *<span class="title function_">rotateRight</span><span class="params">(<span class="keyword">struct</span> ListNode *head, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span> || k == <span class="number">0</span>)              <span class="comment">//先判断链表是否为空与移动的位置k是否为0的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">temp</span> =</span> head;                      <span class="comment">//创建一个节点保持头节点，方便对链表进行移动的操作</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>)                          <span class="comment">//计数链表的长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = count - k % count;                      <span class="comment">//链表进行n次移动后都会变为原链表，所以进行根据数学思想只需要进行count - k % count次移动</span></span><br><span class="line">    <span class="keyword">if</span>(n == count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next = head;                           <span class="comment">//在这一步前temp存放的其实是最后一个节点，为了使链表向右移动，则只需要将temp的next指向头节点</span></span><br><span class="line">    <span class="keyword">while</span>(n--)                                   <span class="comment">//移动头节点后n个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">new</span> =</span> temp-&gt;next;           <span class="comment">//将temp的next指向的节点赋值给new，使其成为新的头节点</span></span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;                           <span class="comment">//将新链表的最后一节指向NULL</span></span><br><span class="line">    <span class="keyword">return</span> new;                                  <span class="comment">//返回新的头节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>给一个数组nums和一个值val，需要原地移除所有数值等于val的元素，并返回移除后数组的新长度。<br>不需要使用额外的数组空间，必须仅使用0(1)额外空间并原地修改输入数组。<br>元素的顺序可以改变，不需要考虑数组种超出新长度后面的元素。<br>示例1：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><br>示例2：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br>解析：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>             <span class="comment">//这题就不多解释了，直接看代码</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> count = nums.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> right = <span class="number">0</span>; right &lt; count; right++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[right] != val)</span><br><span class="line">                &#123;</span><br><span class="line">                    nums[left] = nums[right];</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;暑假120道力扣算法题讲解&quot;&gt;&lt;a href=&quot;#暑假120道力扣算法题讲解&quot; class=&quot;headerlink&quot; title=&quot;暑假120道力扣算法题讲解&quot;&gt;&lt;/a&gt;暑假120道力扣算法题讲解&lt;/h1&gt;&lt;h2 id=&quot;两数求和&quot;&gt;&lt;a href=&quot;#两数求和&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenCv Notes(第一版)</title>
    <link href="https://godofl.github.io/2022/03/19/opencv%20notes%E9%9C%80%E8%A6%81%E6%94%B9%E8%BF%9B/"/>
    <id>https://godofl.github.io/2022/03/19/opencv%20notes%E9%9C%80%E8%A6%81%E6%94%B9%E8%BF%9B/</id>
    <published>2022-03-19T14:02:36.280Z</published>
    <updated>2022-03-19T14:01:43.459Z</updated>
    
    <content type="html"><![CDATA[<p>个人感觉这篇笔记做的不是很好，后面时间再进行改进</p><h1 id="Opencv笔记"><a href="#Opencv笔记" class="headerlink" title="Opencv笔记"></a>Opencv笔记</h1><p><strong>我使用的是python3.7.9</strong>。因为有基础了，所以代码不做过多的说明。<strong>(0-255越来越亮，0黑，255白)</strong></p><h2 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h2><p>打开cmd，cd到python的Scripts目录下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br><span class="line">pip install opencv-python</span><br><span class="line">pip install opencv-contrib-python</span><br></pre></td></tr></table></figure><br>安装完后可以在cmd命令中运行python输入以下指令进行查看是否安装<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="读取图片文件"><a href="#读取图片文件" class="headerlink" title="读取图片文件"></a>读取图片文件</h3><p>cv2.IMREAD_COLOR:读取一张彩色图像<br>cv2.IMREAD_GRAYSCALE:读取一张灰度图像<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_show</span>(<span class="params">name,img</span>):</span>                <span class="comment">#模块化编程，分工</span></span><br><span class="line">    cv2.imshow(name,img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)                    <span class="comment">#等待时间，毫秒级，0表示任意键终止</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;文件&#x27;</span>)           <span class="comment">#读取文件</span></span><br><span class="line">cv_show(<span class="string">&#x27;image&#x27;</span>,img)</span><br></pre></td></tr></table></figure><br><strong>imread()函数</strong>可以指定第二参数，即cv2.IMREAD_COLOR(彩色图)和cv2.IMREAD_GRAYSCALE(灰色图)。<br>保存图像使用<strong>imwrite()函数</strong>。<br>使用<strong>切片</strong>的方法将你感兴趣的地方截出来，只需对代码进行一点修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;文件&#x27;</span>)</span><br><span class="line">img_1 = img[<span class="number">0</span>:<span class="number">200</span>,<span class="number">0</span>:<span class="number">200</span>]     <span class="comment">#截取的部分</span></span><br><span class="line">cv_show(<span class="string">&#x27;result&#x27;</span>,img_1)</span><br></pre></td></tr></table></figure><br>对颜色通道的提取，使用<strong>split()函数</strong>，对图像进行分开处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b,g,r = cv2.split(img)</span><br></pre></td></tr></table></figure><br>处理完后使用<strong>merge()函数</strong>进行组合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.merge(b,g,r)</span><br></pre></td></tr></table></figure></p><h3 id="读取视频文件"><a href="#读取视频文件" class="headerlink" title="读取视频文件"></a>读取视频文件</h3><p>cv2.VideoCapture可以捕获摄像头，用数字控制不同的设备<br>如果是视频文件指定路径即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vc = cv2.VideoCapture(<span class="string">&#x27;文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> vc.isOpened():</span><br><span class="line">    <span class="built_in">open</span>,frame = vc.read()                    <span class="comment">#第二个参数为当前这一帧的图像</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">open</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">open</span>:</span><br><span class="line">    ret,frame = vc.read()</span><br><span class="line">    <span class="keyword">if</span> frame <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)    <span class="comment">#对一帧图像进行灰度图转换</span></span><br><span class="line">        cv2.imshow(<span class="string">&#x27;result&#x27;</span>,gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">10</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:      <span class="comment">#第一个是处理速度，里面的数越小处理的越快，对计算机性能有要求。第二个表示的是退出，27恰好是退出键，ASCII码？</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">vc.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h3 id="边界填充和填充方法"><a href="#边界填充和填充方法" class="headerlink" title="边界填充和填充方法"></a>边界填充和填充方法</h3><p>这个涉及到卷积，高数！高数！高数！开卷。<br>使用<strong>copyMakeBorder()函数</strong><br>BORDER_REPLICATE:复制法，复制最边缘的像素<br>BORDER_REFLECT:反射法，对感兴趣的图像中的像素在两边进行复制<br>BORDER_REFLECT 101:第二种反射法，以边缘像素为轴，对称<br>BORDER_WRAP:外包装法<br>BORDER_CONSTANT:常量法，常数值填充</p><h3 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h3><h4 id="图片相同"><a href="#图片相同" class="headerlink" title="图片相同"></a>图片相同</h4><p>第一种:方法对图像直接进行加法操作，则会<strong>对每一个像素每一个位置</strong>进行加法(维度要一致才能进行相加)，直接相加会对图像进行一个处理工作，如果超过了255，则进行求余(%256)。<br>第二种:方法使用<strong>add()函数</strong>进行相加，这种方法相加，当超过255时，则直接取最大值255，没越界则取自身。</p><h4 id="图片不相同"><a href="#图片不相同" class="headerlink" title="图片不相同"></a>图片不相同</h4><p>当两张图片不相同时，使用<strong>resize()函数</strong>，简单使用操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = cv2.resize(img,(numb,numb))   <span class="comment">#前面是想要resize的图像，后面给的参数是你想要resize的大小。</span></span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = cv2.resize(img,(<span class="number">0</span>,<span class="number">0</span>),fx=<span class="number">1</span>,fy=<span class="number">1</span>)   <span class="comment">#可以不指定大小，直接指定倍数关系</span></span><br></pre></td></tr></table></figure><br>融合图像使用<strong>addWeighted()函数</strong>，简单使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = cv2.addWeighted(img_1,numb_1,img_2,numb_2,numb_3)</span><br></pre></td></tr></table></figure><br>注:result = numb_1*img_1+numb_2*img_2+numb_3,numb_1和numb_2指的是img_1和img_2的一个权重，numb_3则是亮度集</p><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p>在敲代码时默认你已经读取了一张图像，所以没有敲上cv2.imread()！！！</p><h3 id="图像阈值处理"><a href="#图像阈值处理" class="headerlink" title="图像阈值处理"></a>图像阈值处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret,dst = cv2.threshold(src,thresh,maxval,<span class="built_in">type</span>)    <span class="comment">#返回值的两个参数一般只关注第二个dst输出图</span></span><br></pre></td></tr></table></figure><p>src:输入图，只能输入单通道图像，也就是灰度图<br>dst:输出图<br>thresh:阈值<br>maxval:当像素值超过了阈值(或小于阈值，根据type来决定),所赋予的值<br>type:二值化操作类型，有以下五种<br>1,cv2.THRESH_BINARY    超过阈值部分取maxval(最大值)，否则取0<br>2,cv2.THRESH_BINARY_INV   上面的反转<br>3,cv2.THRESH_TRUNC   大于阈值部分设为阈值，否则不变<br>4,cv2.THRESH_TOZERO   大于阈值部分不改变，否则设为0<br>5,cv2.THRESH_TOZERO_INV   上面的反转</p><h3 id="图像平滑处理"><a href="#图像平滑处理" class="headerlink" title="图像平滑处理"></a>图像平滑处理</h3><p>第一种:均值滤波，简单的平均卷积操作，使用<strong>blur()函数</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blur = cv2.blur(img,(<span class="number">3</span>,<span class="number">3</span>))    <span class="comment">#对区域进行操作，一般用奇数，不用偶数</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;blur&#x27;</span>,blur)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><br>第二种:方框滤波，使用<strong>boxFilter()函数</strong>，操作和均值差不多，可以选择归一化，不归一化的话容易越界，越界后直接取最大值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box = cv2.boxFilter(img,-<span class="number">1</span>,(<span class="number">3</span>,<span class="number">3</span>),normalize=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;box&#x27;</span>,box)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><br>第三种:高斯滤波，使用<strong>GaussianBlur()函数</strong>高斯模糊的卷积核里的数值是满足高斯分布，相当于更重视中间的，相当于构建了一个权重矩阵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aussian = cv2.GaussianBlur(img,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">1</span>)      <span class="comment">#参数1表示权重，就是选取的那个最重要的值，离那个值越远，越不重要，所以比重就越低</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;aussian&#x27;</span>,aussian)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><br>第四种:中值滤波，使用<strong>medianBlur()函数</strong>相当于用中值代替，既先将矩阵里的数值大小进行排序，排完后选择中间的值代替矩阵中间的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">median = cv2.medianBlur(img,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;median&#x27;</span>,median)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h3 id="形态学操作"><a href="#形态学操作" class="headerlink" title="形态学操作"></a>形态学操作</h3><h4 id="腐蚀操作"><a href="#腐蚀操作" class="headerlink" title="腐蚀操作"></a>腐蚀操作</h4><p>有点抽象得看多几遍视频，使用<strong>erode()函数</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)               <span class="comment">#指定一个卷积核</span></span><br><span class="line">erosion = cv2.erode(img,kernel,iterations=<span class="number">1</span>)   <span class="comment">#最后的参数是迭代次数</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;erosion&#x27;</span>,erosion)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h4 id="膨胀操作"><a href="#膨胀操作" class="headerlink" title="膨胀操作"></a>膨胀操作</h4><p>有点像腐蚀得逆操作，使用<strong>dilate()函数</strong>，有一点白色则该像素点就为白色<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">dige_dilate = cv2.dilate(dige_erosion,kernel,iterations=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;dilate&#x27;</span>,dige_dilate)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h4 id="开运算和闭运算"><a href="#开运算和闭运算" class="headerlink" title="开运算和闭运算"></a>开运算和闭运算</h4><p>开运算:先腐蚀，再膨胀<br>闭运算:先膨胀，在腐蚀<br>有写好的函数去，直接使用即可，<strong>morphologyEx()函数</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开运算</span></span><br><span class="line">kernel = np.ones((<span class="number">5</span>,<span class="number">5</span>),np.uint8)</span><br><span class="line">opening = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;opening&#x27;</span>,opening)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><br>闭运算把morphologyEx()的第二个参数改为<strong>cv2.MORPH_CLOSE</strong>就可以</p><h4 id="梯度运算"><a href="#梯度运算" class="headerlink" title="梯度运算"></a>梯度运算</h4><p>梯度运算=膨胀-腐蚀，将morphologyEx()函数里的第二个参数改为MORPH_GRADIENT即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradient = cv2.morphologyEx(img,cv2.MORPH_GRADIENT,kernel)</span><br></pre></td></tr></table></figure></p><h4 id="礼帽和黑帽"><a href="#礼帽和黑帽" class="headerlink" title="礼帽和黑帽"></a>礼帽和黑帽</h4><p>礼帽=原始输入-开运算结果<br>黑帽=闭运算-原始输入<br>操作一样，将函数的第二个参数修改即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#黑帽</span></span><br><span class="line">tophat = cv2.morphologyEx(img,cv2.MORPH_TOPHAT,kernel)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#黑帽</span></span><br><span class="line">blackhat = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT,kernel)</span><br></pre></td></tr></table></figure></p><h3 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h3><h4 id="sobel算子"><a href="#sobel算子" class="headerlink" title="sobel算子"></a>sobel算子</h4><script type="math/tex; mode=display">\mathbf{G}_x = \begin{bmatrix}    -1 & 0 & 1\\    -2 & 0 & 2\\    -1 & 0 & 1    \end{bmatrix} \tag{1}*A</script><p>(博客里看不见就打开预览看吧(doge))</p><script type="math/tex; mode=display">\mathbf{G}_y = \begin{bmatrix}    -1 & -2 & -1\\    0 & 0 & 0\\    1 & 2 & 1    \end{bmatrix} \tag{2}*B</script><p>使用代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sob = cv2.Sobel(src,ddepth,dx,dy,ksize)      <span class="comment">#ddepth一般默认为-1，dx和dy表示你要去算的方向，ksize指定核的大小。</span></span><br></pre></td></tr></table></figure><br>矩阵对应位置相加或者想减(右减左，上减下)，然后加起来就完事了。ddepth有个高级写法cv2.CV_64F，能表示负数的形势。opencv中的绝对值函数<strong>cv2.converScaleAbs()</strong>。最后要算一个总和G，G=squrt(Gx+Gy)。<br><strong>最好分别计算x和y然后使用cv2.addWeighted(sobelx,weight_x,sobely,weight_y,0)函数进行求和，偏置项一般默认为0。</strong></p><h4 id="scharr与lapkacian算子"><a href="#scharr与lapkacian算子" class="headerlink" title="scharr与lapkacian算子"></a>scharr与lapkacian算子</h4><p>scharr算子与sobel算子整体计算方式一样，scharr算子核中数值大，对结果差异更敏感，能捕捉到更丰富的东西。<br>laplacian算子对一些变化更敏感，也对噪音点敏感，所以laplacian算子还要和其他方法一起共同使用，一般不会单独使用</p><h4 id="Canny边缘监检测"><a href="#Canny边缘监检测" class="headerlink" title="Canny边缘监检测"></a>Canny边缘监检测</h4><p>1.使用高斯滤波器，平滑图像，滤除噪声<br>2.计算图像中每个像素点的梯度强度和方向<br>3.应用非极大值抑制(要是忘了这个概念就看视频吧)，以消除边缘检测带来的杂散响应<br>4.应用双阈值检测来确定真实的和潜在的边缘<br>5.通过抑制孤立的弱边缘最终完成边缘检测<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can = cv2.Canny(img,minval,maxval)</span><br></pre></td></tr></table></figure></p><h3 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h3><p>高斯金字塔(上下是相反的):<br><strong>向下采样方法(缩小):</strong><br>将G与高斯内核卷积<br>将所有偶数行和列去掉<br><strong>向上采样方法(放大):</strong><br>将图像在每个方向扩大为原来的两倍，新增的行和列以0填充<br>使用先前相同的内核(乘以4)与放大后的图像卷积，获得近似值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">up = cv2.pyrUp(img)</span><br><span class="line"></span><br><span class="line">down = cv2.pyrDown(img)</span><br></pre></td></tr></table></figure><br>拉普拉斯金字塔:(了解即可)<br>L = G - pyrUp(pyrDown(G))<br>1.低通滤波<br>2.缩小尺寸<br>3.放大尺寸<br>4.图像相减</p><h3 id="轮廓检测"><a href="#轮廓检测" class="headerlink" title="轮廓检测"></a>轮廓检测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con = cv2.findContours(img,mode,method)</span><br></pre></td></tr></table></figure><p><strong>modle:轮廓检索模式</strong><br>PETR_EXTERNAL:只检索最外面的轮廓<br>RETR_LIST:检索所有的轮廓，并将其保存到一条链表当中<br>RETR_CCOMP:检索所有的轮廓，并将他们组织为两层，顶层是各部分的外部边界，第二层是空洞边界<br>RETR_TREE(最常用):检索所有的轮廓，并重构嵌套轮廓的整个层次<br>method:轮廓逼近方法<br>CHAIN_APPROX_NONE:以Freeman链码的方式输出轮廓，所用其他方法输出多边形(顶点的序列)<br>CHAIN_APPROX_SIMPLE:压缩水平的，垂直的和斜的部分，也就是，函数只保留他们的终点部分<br><strong>在检测之前先对数据进行二值处理</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret,thresh = cv2.threshold(gray,minval,maxval,cv2.THRESH_BINARY)</span><br></pre></td></tr></table></figure><br>再进行检测<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binary,contours,hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)</span><br></pre></td></tr></table></figure><br>绘制轮廓<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">draw_img = img.copy()    <span class="comment">#类似创建了一个副本</span></span><br><span class="line">res = cv2.drawContours(draw_img,contours,-<span class="number">1</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure><br>第一个参数，将图像画到哪里。第二个参数，想要画的轮廓是什么，第三个参数，默认-1，第四个参数，B，G，R，最后一个参数，线条的宽度。<br>边界矩形<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">x,y,w,h = cv2.boundingRect(cnt)</span><br><span class="line">img = cv2.rectangle(img,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><h3 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h3><p>要先转换成灰度图<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">img_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">template = cv2.imread(<span class="string">&#x27;&#x27;</span>)    <span class="comment">#要匹配的模板</span></span><br><span class="line">template_gray = cv2.cvtColor(template,cv2.COLOR_BGR2GRAY)</span><br><span class="line">h,w = template_gray.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">res = cv2.matchTemplate(img_gray,template_gray,cv2.TM_SQDIFF)</span><br><span class="line">min_val,max_val,min_loc = cv2.minMaxLoc(res)      <span class="comment">#定位位置，可以敲这段代码</span></span><br><span class="line">threshold = <span class="number">0.7</span>        <span class="comment">#选取匹配值程度大于%70的坐标</span></span><br><span class="line">loc = np.where(res&gt;=threshold)     <span class="comment">#符合就取左上角的坐标</span></span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> <span class="built_in">zip</span>(*loc[::-<span class="number">1</span>]):</span><br><span class="line">    bottom_right = (pt[<span class="number">0</span>] + w,pt[<span class="number">1</span>] + h)</span><br><span class="line">    cv2.rectangle(img,pt,bottom_right,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Res&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>TM_SQDIFF:计算平方不同，计算出来的值越小，越相关<br>TM_CCORR:计算相关性，计算出来的值越大，越相关<br>TM_CCOEEFF:计算相关系数，计算出来的值越大，越相关<br>TM_SQDIFF_NORMED:计算归一化平方不同，计算出来的值越接近0，越相关<br>TM_CCORR_NORMED:计算归一化相关性，计算出来的值越接近1，越相关<br>TM_CCOEFF_NORMED:计算归一化相关系数，计算出来的值越接近1，越相关<br>相关公式去OpenCv官网查看，进行归一化的算法结果好。</p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.calcHist(images,channels,mask,histSize,ranges)</span><br></pre></td></tr></table></figure><p>images:原图像图像格式为uint8或float32。当传入函数时应使用中括号[]括起。<br>channels:同样用中括号<br>mask:掩模图象。统计整幅图像就将传入None<br>histSize:BIN的数目，中括号括起<br>ranges:像素值范围[0,256]</p><h3 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h3><p>傅里叶变换的作用<br>高频:变化剧烈的灰度分量，如边界<br>低频:变化缓慢的灰度分量，如一片大海<br><br><br>滤波<br>低通滤波器:只保留低频，会使图像变模糊<br>高通滤波器:只保留高频，会使图像细节增强<br><br><br>主要使用的时cv2.dft()函数和cv2.idft()函数，图像要转换为np.float32格式，使用shift()函数将图像转换到中心位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;个人感觉这篇笔记做的不是很好，后面时间再进行改进&lt;/p&gt;
&lt;h1 id=&quot;Opencv笔记&quot;&gt;&lt;a href=&quot;#Opencv笔记&quot; class=&quot;headerlink&quot; title=&quot;Opencv笔记&quot;&gt;&lt;/a&gt;Opencv笔记&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;我使用的是p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>神经网络与深度学习概念</title>
    <link href="https://godofl.github.io/2022/03/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/"/>
    <id>https://godofl.github.io/2022/03/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/</id>
    <published>2022-03-17T02:25:53.420Z</published>
    <updated>2022-03-19T14:10:01.730Z</updated>
    
    <content type="html"><![CDATA[<font color=#FF0000>在写数学公式时不能出现}}两个大括号连在一起的情况，要用空格分开，如：} }，这样才能上传到博客</font><h1 id="学习神经网络与深度学习需要的数学基础"><a href="#学习神经网络与深度学习需要的数学基础" class="headerlink" title="学习神经网络与深度学习需要的数学基础"></a>学习神经网络与深度学习需要的数学基础</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>向量是由一组实数组成的有序数组，同时具有大小和方向，一个N维向量a是由N个有序实数组成，表示为</p><script type="math/tex; mode=display">a = [a_1, a_2,..., a_n]</script><p>其中$a_n$称为向量a的第n个分量，或第n维</p><h2 id="向量空间"><a href="#向量空间" class="headerlink" title="向量空间"></a>向量空间</h2><p>向量空间（线性空间），是指由向量组成的集合，并满足一下条件：</p><ol><li>向量加法：向量空间V中的两个向量a和b，他们a+b也属于空间V</li><li>向量乘法：向量空间V中的任一向量a和任一标量c，他们的乘积c*a也属于空间V，一个常用的线性空间是欧氏空间，一个定义在实数域上的欧式空间通常表示为$ℝ^N$，其中N为空间维度，欧氏空间中的向量加法和标量乘法定义为：<script type="math/tex; mode=display">[a_1,a_2,...,a_N] + [b_1,b_2,...,b_N] = [a_1+b_1,a_2+b_2,...,a_N+b_N]c*[a_1,a_2,...,a_N] = [c*a_1,c*a_2,...,c*a_N]</script></li></ol><p>线性子空间：向量空间 𝒱 的线性子空间 𝒰 是 𝒱 的一个子集，并且满足向量空间<br>的条件（向量加法和标量乘法）</p><p>线性无关：线性空间 𝒱 中的 𝑀 个向量 {𝒗1, 𝒗2, ⋯ , 𝒗𝑀}，如果对任意的一组标量𝜆1, 𝜆2, ⋯ , 𝜆𝑀，满足𝜆1𝒗1 + 𝜆2𝒗2 +⋯ + 𝜆𝑀𝒗𝑀 = 0，则必然 𝜆1 = 𝜆2 =⋯ = 𝜆𝑀 =0，那么{𝒗1, 𝒗2, ⋯ , 𝒗𝑀}是线性无关的，也称为线性独立的</p><p>内积：一个𝑁 维线性空间中的两个向量𝒂和𝒃，其内积（Inner Product）为</p><script type="math/tex; mode=display"><a,b> = \sum_{n=1}^Na_n*b_n</script><p>内积也称为点积（Dot Product）或标量积（Scalar Product）</p><p>正交：如果向量空间中两个向量的内积为0，则它们正交（Orthogonal），如果向量空间中一个向量𝒗与子空间𝒰 中的每个向量都正交，那么向量𝒗和子空间𝒰<br>正交</p><h2 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h2><p>一个表示向量“长度”的函数，为向量空间内的所有向量赋予非零的正长度或大小．对于一个𝑁 维向量𝒗，一个常见的范数函数为$ℓ_𝑝$范数</p><script type="math/tex; mode=display">ℓ𝑝(𝒗) = ||𝒗||_p = (\sum_{n=1}^N|𝒗_n|^p)^\frac 1p</script><p>其中𝑝 ≥ 0为一个标量的参数．常用的𝑝的取值有1，2，∞等</p><p>$ℓ_1$：范数$ℓ_1$范数为向量的各个元素的绝对值之和</p><script type="math/tex; mode=display">||𝒗||_1 = \sum_{n=1}^N|v_n|</script><p>$ℓ_2$：范数$ℓ_2$范数为向量的各个元素的平方和再开平方</p><script type="math/tex; mode=display">||𝒗||_2 = \sqrt{\sum_{n=1}^Nv_n^2} = \sqrt{v^Tv}</script><p>$ℓ<em>∞$：范数$ℓ</em>∞$ 范数为向量的各个元素的最大绝对值</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>线性映射：从线性空间 𝒳 到其自身的线性映射，称为线性变换（Linear Transformation）．是指从线性空间𝒳到线性空间𝒴的一个映射函数𝑓∶𝒳 → 𝒴，并满足：对于𝒳 中任何两个向量𝒖和𝒗以及任何标量𝑐，有</p><script type="math/tex; mode=display">f(u+v) = f(u)+f(v) \\f(cv) = cf(v)</script><p>两个有限维欧氏空间的映射函数$𝑓∶ℝ^𝑁 → ℝ^𝑀$可以表示为</p><script type="math/tex; mode=display">y = Ax ≜ \begin{bmatrix} a_{11}x_1+a_{12}x_2+a_{13}x_3+a_{1N}x_N \\ a_{21}x_1+a_{22}x_2+a_{23}x_3+a_{2N}x_N \\ a_{M1}x_1+a_{M2}x_2+a_{M3}x_3+a_{MN}x_N \end{bmatrix}</script><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>仿射变换：是指通过一个线性变换和一个平移，将一个向量空间变换成另一个向量空间的过程<br>令A $\inℝ^N$为平移项，当b=0时，反射变换就退化为线性变换</p><h2 id="矩阵操作"><a href="#矩阵操作" class="headerlink" title="矩阵操作"></a>矩阵操作</h2><p>加，乘，转置不说<br>Hadamard积：就是矩阵A和矩阵B逐点乘积，A和B中的对应元素相乘</p><script type="math/tex; mode=display">[A \bigodot B]_{mn} = a_{mn}b_{mn}</script><p>一个标量c与矩阵A乘积每个相应元素与c的乘积</p><script type="math/tex; mode=display">[cA]_{mn} = ca_{mn}</script><p>Kronecker积：如果A是M<em>N的矩阵，B是S</em>T的矩阵，那么它们的Kronecker积是MS<em>NT的矩阵，（用下标可能有点难看懂，所以我选择用两个2</em>2的矩阵做示范）</p><script type="math/tex; mode=display">\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix} * \begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix} = \begin{bmatrix} 1*1 & 1*2 & 2*1 & 2*2 \\ 1*3 & 1*4 & 2*3 & 2*4 \\ 3*1 & 3*2 & 4*1 & 4*2 \\ 3*3 & 3*4 & 4*3 & 4*4\end{bmatrix}</script><p>外积：两个向量a$\inℝ^M$和b$\inℝ^N$的外积是一个M*N的矩阵,（简单写了）</p><script type="math/tex; mode=display">a\bigodot b = ab^T</script><p>向量化：矩阵的向量化是将矩阵表示为一个列向量，向量化算子vec(·)</p><p>迹：方块矩阵 𝑨 的对角线元素之和称为它的迹（Trace），记为 𝑡𝑟(𝑨)．尽管矩阵<br>的乘法不满足交换律，但它们的迹相同，即𝑡𝑟(𝑨𝑩) = 𝑡𝑟(𝑩𝑨)</p><p>行列式：方块矩阵 𝑨 的行列式是一个将其映射到标量的函数，记作det(𝑨) 或|𝑨|，行列式可以看作有向面积或体积的概念在欧氏空间中的推广，在 𝑁 维欧氏空间中，行列式描述的是一个线性变换对“体积”所造成的影响，一个N乘N的方块矩阵A的行列式定义为：</p><script type="math/tex; mode=display">det(A) = \sum_{\sigma\in S_N} sgn(\sigma)\prod_{n=1}^N a_n,\sigma(n)</script><p>其中 𝑆𝑁 是 {1, 2, ⋯ , 𝑁} 的所有排列的集合，𝜎是其中一个排列，𝜎(𝑛) 是元素 𝑛 在排列𝜎中的位置，sgn(𝜎)表示排列𝜎的符号差，定义为</p><script type="math/tex; mode=display">sgn(\sigma) = \begin{cases} 1& \text{𝜎中的逆序对有偶数个} \\ -1& \text{𝜎中的逆序对有奇数个} \end{cases}</script><p>其中逆序对的定义为：在排列 𝜎 中，如果有序数对(𝑖, 𝑗) 满足1≤𝑖&lt;𝑗≤𝑁但𝜎(𝑖)&gt;𝜎(𝑗)，则其为𝜎的一个逆序对</p><p>秩：一个矩阵 𝑨 的列秩是 𝑨 的线性无关的列向量数量，行秩是 𝑨 的线性无关的<br>行向量数量．一个矩阵的列秩和行秩总是相等的，简称为秩</p><p>范数：矩阵的范数有很多种形式，其中常用的ℓ𝑝 范数定义为</p><script type="math/tex; mode=display">||A||_p = (\sum_{m=1}^M \sum_{n=1}^N|a_{mn}|^p)^{1/p}</script><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>对于定义域和值域都是实数域的函数𝑓∶ℝ → ℝ，若𝑓(𝑥)在点$𝑥_0$的某个邻<br>域Δ𝑥内，极限</p><script type="math/tex; mode=display">f^{'}(x_0) = \lim\limits_{x\rightarrow\infty}\frac{f(x_0+\Delta{x})-f(x_0)}{\Delta{x} }</script><p>存在，则称函数f(x)在$x_0$处可导，$f^{‘}(x_0)$称为其导数，或导函数，也可记为$\frac{ {\rm d}f(x)}{ {d}x}$</p><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><p>给定一个连续函数，计算其导数的过程称为微分（Differentiation）．若函<br>数𝑓(𝑥)在其定义域包含的某区间内每一个点都可导，那么也可以说函数𝑓(𝑥)在<br>这个区间内可导．如果一个函数 𝑓(𝑥) 在定义域中的所有点都存在导数，则 𝑓(𝑥)<br>为可微函数（Differentiable Function）．可微函数一定连续，但连续函数不一定<br>可微．例如，函数|𝑥|为连续函数，但在点𝑥 = 0处不可导</p><h2 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h2><p>如果函数𝑓(𝑥)在𝑎点处𝑛次可导（𝑛≥1），在一个包含点𝑎的区间上的任意𝑥，都有</p><script type="math/tex; mode=display">f(x) = f(a)+\frac{1}{1!}f^{'}(a)(x-a)+\frac{1}{2!}f^{(2)}(a)(x-a)^2+...+\frac{1}{n!}f^{(n)}(a)(x-a)^n+R_n(x)</script><p>其中$f^{(n)}(a)$表示函数在点a的n阶导数，$R_n(x)$是泰勒公式的余项，是$(x-a)^{n}$的高阶无穷小<br>常用的八个泰勒公式记忆方法<br>“e ‘1’ sin cos 带阶乘”<br>函数正负看图像</p><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><ol><li>定积分<br>定积分可以理解为在坐标平面上由函数𝑓(𝑥)，垂直直线𝑥 = 𝑎，𝑥 = 𝑏以及𝑥轴围起来的区域的带符号的面积，记为<script type="math/tex; mode=display">F(x) = \int_a^b{f(x)}dx</script>带符号的面积表示𝑥轴以上的面积为正，𝑥轴以下的面积为负</li><li>不定积分<script type="math/tex; mode=display">F(x) = \int{f(x)}dx</script>𝐹(𝑥)称为𝑓(𝑥)的原函数或反导函数，d𝑥 表示积分变量为𝑥．当𝑓(𝑥)是𝐹(𝑥)<br>的导数时，𝐹(𝑥)是𝑓(𝑥)的不定积分．根据导数的性质，一个函数𝑓(𝑥)的不定积分<br>是不唯一的．若𝐹(𝑥)是𝑓(𝑥)的不定积分，𝐹(𝑥) + 𝐶也是𝑓(𝑥)的不定积分，其中𝐶<br>为一个常数</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;font color=#FF0000&gt;在写数学公式时不能出现}}两个大括号连在一起的情况，要用空格分开，如：} }，这样才能上传到博客&lt;/font&gt;

&lt;h1 id=&quot;学习神经网络与深度学习需要的数学基础&quot;&gt;&lt;a href=&quot;#学习神经网络与深度学习需要的数学基础&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP notes</title>
    <link href="https://godofl.github.io/2022/03/14/PHP%20notes/"/>
    <id>https://godofl.github.io/2022/03/14/PHP%20notes/</id>
    <published>2022-03-14T11:04:28.486Z</published>
    <updated>2022-03-19T14:08:37.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="php变量规则"><a href="#php变量规则" class="headerlink" title="php变量规则"></a>php变量规则</h2><ol><li>变量以$符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母，数字以及下划线</li><li>变量名不能包含空格</li><li>变量名是区分大小写的</li></ol><h2 id="php输出语句区别"><a href="#php输出语句区别" class="headerlink" title="php输出语句区别"></a>php输出语句区别</h2><p>echo 与 print语句:</p><ol><li>echo 输出的是字符串，print 输出的是数字</li><li>echo 输出的速度比print快，echo没有返回值，print 有返回值1</li></ol><h2 id="EOF使用说明"><a href="#EOF使用说明" class="headerlink" title="EOF使用说明"></a>EOF使用说明</h2><ol><li>必须后接分号，否则编译不通过</li><li>EOF可以用任意其他字符代替，只需保证结束标识与开始标识一致</li><li>结束标识必须顶格独占一行</li><li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号</li><li>单内容需要内嵌引号时，不需要加转义符，本身对单引号转义</li></ol><h2 id="PHP类型比较"><a href="#PHP类型比较" class="headerlink" title="PHP类型比较"></a>PHP类型比较</h2><ol><li>松散比较：使用两个==等号，只比较值，没有类型</li><li>严格比较：用三个等号===，除了比较值，也比较类型</li></ol><h2 id="设置PHP常量"><a href="#设置PHP常量" class="headerlink" title="设置PHP常量"></a>设置PHP常量</h2><p>使用define()函数定义常量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> define(<span class="keyword">string</span> <span class="variable">$name</span>, <span class="keyword">mixed</span> <span class="variable">$value</span> [, <span class="keyword">bool</span> <span class="variable">$case_insensitive</span> = <span class="literal">false</span>])</span><br></pre></td></tr></table></figure><br>三个参数的含义：</p><ol><li>name：必选参数，常量名称</li><li>value：必选参数，常量的值</li><li>case_insensitive：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的</li></ol><p>常量定义后默认是全局变量</p><h2 id="并置运算符"><a href="#并置运算符" class="headerlink" title="并置运算符"></a>并置运算符</h2><p>并置运算符.用于把两个字符串链接起来<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt1</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable">$txt2</span> = <span class="string">&quot;World!&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txt1</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$txt2</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h2><p>三种数组类型</p><ol><li>数值数组-带有数字ID键的数组（经典从0开始）</li><li>关联数组-带有指定的键的数组，每个键关联一个值（键值对）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 没见过的循环方式，记下来</span></span><br><span class="line"><span class="variable">$age</span> = <span class="keyword">array</span>(<span class="string">&quot;Alex&quot;</span>=&gt;<span class="string">&quot;20&quot;</span>, <span class="string">&quot;Wang&quot;</span>=&gt;<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$age</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$x_value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . <span class="variable">$x</span> . <span class="string">&quot;, Value=&quot;</span> . <span class="variable">$x_value</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li>多维数组-包含一个或多个数组的数组</li></ol><h2 id="PHP超级全局变量"><a href="#PHP超级全局变量" class="headerlink" title="PHP超级全局变量"></a>PHP超级全局变量</h2><p>比较常用的几个</p><ol><li>$_GLOBALS</li><li>$_SERVER</li><li>$_REQUEST</li><li>$_POST</li><li>$_GET<br>内容比较多，在后面补全</li></ol><h2 id="PHP循环"><a href="#PHP循环" class="headerlink" title="PHP循环"></a>PHP循环</h2><ol><li>while循环-只要指定的条件成立，则循环执行代码块</li><li>do…while-首先执行一次代码块，然后在指定的条件成立时重复这个循环</li><li>for-循环执行代码块指定的次数</li><li>foreach-根据数组中每个元素来循环代码块（在PHP数组介绍过了）</li></ol><h2 id="PHP魔术常量"><a href="#PHP魔术常量" class="headerlink" title="PHP魔术常量"></a>PHP魔术常量</h2><p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变</p><ol><li><strong>LINE</strong>，文件当前行号</li><li><strong>FILE</strong>，文件的完整路径和文件名</li><li><strong>DIR</strong>，文件所在的目录</li><li><strong>FUNCTION</strong>，函数名称</li><li><strong>CLASS</strong>， 类名称</li><li><strong>TRAIT</strong>，Trait名称</li><li><strong>METHOD</strong>，类的方法名</li><li><strong>NAMESPACE</strong>，当前命名空间的名称（区分大小写）</li></ol><h2 id="命名空间-C-中也有"><a href="#命名空间-C-中也有" class="headerlink" title="命名空间(C++中也有)"></a>命名空间(C++中也有)</h2><p>这个很重要！！！<br>PHP中的定义命名空间可以解决的问题：</p><ol><li>编写的代码与PHP内部的类/函数/常量或者第三方类/函数/常量之间的名字冲突</li><li>为长标识符名称创建别名<h3 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h3>如果文件中包含命名空间，则命名空间必须在最前面（declare语句除外）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Myproject</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>在同一文件定义命名空间时，建议使用大括号写法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Myproject</span>&#123;</span><br><span class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AnotherProject</span>&#123;</span><br><span class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 不推荐写法，如下</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Myproject</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AnotherProject</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CONNECT_OK = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>子命名空间<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Myproject</span>\<span class="title">Sub</span>\<span class="title">Level</span>;</span><br><span class="line"><span class="comment"># 代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名空间使用"><a href="#命名空间使用" class="headerlink" title="命名空间使用"></a>命名空间使用</h3></li><li>非限定名称，或不包含前缀的类名称<br>例：$a = new foo();或者foo::staticmethod();</li><li>限定名称，或包含前缀的名称<br>例：$a = new subnamespace\foo();或者subnamespaace\foo::staticmethod();</li><li>完全限定名称，或包含了全局前缀操作符的名称<br>例：$a = new \currentnamespace\foo();或者\currentnamespace\foo::staticmethod();</li></ol><h3 id="namespace关键字和NAMESPACE常量"><a href="#namespace关键字和NAMESPACE常量" class="headerlink" title="namespace关键字和NAMESPACE常量"></a>namespace关键字和<strong>NAMESPACE</strong>常量</h3><p>使用常量<strong>namespace</strong>创建动态名称<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Myproject</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$classname</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">__NAMESPACE__</span> . <span class="string">&#x27;\\&#x27;</span> . <span class="variable">$classname</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="使用命名空间：别名导入"><a href="#使用命名空间：别名导入" class="headerlink" title="使用命名空间：别名导入"></a>使用命名空间：别名导入</h3><ol><li>使用use操作符导入/使用别名<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">Classname</span> <span class="title">as</span> <span class="title">Another</span>;</span><br></pre></td></tr></table></figure></li><li>一行中包含多个use语句（不做代码示范了）</li><li>导入和动态名称<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">Classname</span> <span class="title">as</span> <span class="title">Another</span>, <span class="title">MyFull</span>\<span class="title">NSname</span></span><br><span class="line"></span><br><span class="line">$<span class="title">obj</span> = <span class="title">new</span> <span class="title">Another</span>();      <span class="comment"># 实例化一个 My\Full\Classname 对象</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;Another&#x27;</span>;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="variable">$a</span>();           <span class="comment"># 实际化一个Another 对象</span></span><br></pre></td></tr></table></figure></li><li>导入和完全限定名称<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">My</span>\<span class="title">Full</span>\<span class="title">Classname</span> <span class="title">as</span> <span class="title">Another</span>, <span class="title">My</span>\<span class="title">Full</span>\<span class="title">NSname</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> Another;     <span class="comment"># 实例化 My\Full\Classname 类</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> \Another;    <span class="comment"># 实例化 Another 类</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> Another\thing;    <span class="comment"># 实例化 My\Full\Classname\thing 类</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> \Another\thing;   <span class="comment"># 实例化 Another\thing 类</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用命名空间：后备全局函数-常量"><a href="#使用命名空间：后备全局函数-常量" class="headerlink" title="使用命名空间：后备全局函数/常量"></a>使用命名空间：后备全局函数/常量</h3><ol><li>在命名空间中访问全局类<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">A</span>\<span class="title">B</span>\<span class="title">C</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception</span> <span class="keyword">extends</span> \<span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;hi&#x27;</span>);   <span class="comment"># $a 是类 A\B\C\Exception 的一个对象</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;hi&#x27;</span>);  <span class="comment"># $b 是类 Exception 的一个对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>当命名空间中不存在函数或者常量时，php会使用全局空间中的函数或者常量</li><li>在命名空间中后备全局函数/常量<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">A</span>\<span class="title">B</span>\<span class="title">C</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> E_ERROR = <span class="number">45</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strlen</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> \strlen(<span class="variable">$str</span>) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_ERROR, <span class="string">&quot;\n&quot;</span>;  <span class="comment"># 输出 &quot;45&quot;</span></span><br><span class="line"><span class="keyword">echo</span> INI_ALL, <span class="string">&quot;\n&quot;</span>;  <span class="comment"># 输出 &quot;7&quot; - 使用全局常量 INI_ALL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> strlen(<span class="string">&#x27;hi&#x27;</span>), <span class="string">&quot;\n&quot;</span>;  <span class="comment"># 输出 &quot;1&quot;</span></span><br><span class="line"><span class="keyword">if</span> (is_array(<span class="string">&#x27;hi&#x27;</span>)) &#123;     <span class="comment"># 输出 &quot;is not array&quot;</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;is array\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;is not array\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="全局空间"><a href="#全局空间" class="headerlink" title="全局空间"></a>全局空间</h3><p>在名称前加上前缀 \ 表示该名称是全局空间中的名称，即使该名称位于其它的命名空间中时也是如此</p><h3 id="命名空间的顺序"><a href="#命名空间的顺序" class="headerlink" title="命名空间的顺序"></a>命名空间的顺序</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;php变量规则&quot;&gt;&lt;a href=&quot;#php变量规则&quot; class=&quot;headerlink&quot; title=&quot;php</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://godofl.github.io/2021/11/15/Python%20notes/"/>
    <id>https://godofl.github.io/2021/11/15/Python%20notes/</id>
    <published>2021-11-15T04:25:51.318Z</published>
    <updated>2022-03-14T12:23:54.574Z</updated>
    
    <content type="html"><![CDATA[<font color=#FF0000>以下的程序都是在Python3下运行，主要是给自己看的，代码没有任何的注释，所以可能对读者不咋友好。</font><h1 id="变量和简单的数据类型"><a href="#变量和简单的数据类型" class="headerlink" title="变量和简单的数据类型"></a>变量和简单的数据类型</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在程序中可以随时修改变量的值，Python始终记录的是变量的最新值。<br>关于变量的命名与使用和C语言没什么区别，除了i与O要谨慎使用(可能会被看成1和0)。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>与C语言不同的是Python的字符串是用<strong>引号</strong>(<strong>单引号和双引号</strong>)扩起，看似简单，其实使用的方式有很多。</p><h3 id="修改字符串的大小写"><a href="#修改字符串的大小写" class="headerlink" title="修改字符串的大小写"></a>修改字符串的大小写</h3><p>使用<strong>title()函数</strong>，title()函数是将字符串里的每个单词首字母大写。title()函数括号里是空的是因为title()函数不需要提供额外的信息。<br>使用title()，使用代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;ada lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ada Lovelace</span><br></pre></td></tr></table></figure><br>还有两个函数upper()和lower()函数，与C语言不同的是这两个函数改的是<strong>整串</strong>字符串，用法与title()函数相同。</p><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>相比C语言，Python的字符串拼接大有不同，Python的字符串拼接不需要调用任何函数，可以直接用+号进行<strong>拼接</strong>。<br>字符串拼接的示例如下<br>示例一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(full_name)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><br>示例二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><br>示例三<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></p><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><p>Python提供<strong>strip()函数</strong>用于删除字符串中多余的空白，但删除空白是暂时的，如果想彻底删除，就要将删除后的新值重新存放回原来的变量中。<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&quot; Alex &quot;</span></span><br><span class="line"></span><br><span class="line">my_name = my_name.strip()</span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alex</span><br></pre></td></tr></table></figure><br>还有<strong>lstrip()函数</strong>和<strong>rstrip()函数</strong>，前者用于删除字符串前的空格，后者用于删除字符串后的空格，strip()函数则是删除字符串里所有的空格。</p><h3 id="使用字符串时避免一些语法错误"><a href="#使用字符串时避免一些语法错误" class="headerlink" title="使用字符串时避免一些语法错误"></a>使用字符串时避免一些语法错误</h3><p>以下有两个示例<br>正确<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;One of Python&#x27;s strengths is its diverse community&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><br>错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&#x27;One of Python&#x27;</span>s strengths <span class="keyword">is</span> its diverse community<span class="string">&#x27;        #错误原因是Python不能正确识别结束位置</span></span><br><span class="line"><span class="string">print(message)</span></span><br></pre></td></tr></table></figure></p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>使用数字类型变量时无需定义是什么类型的变量，可以直接使用。(Python会自动识别)<br>Python可以使用两个乘号表示乘方的运算。<br><strong>注意</strong>：Python中与浮点的计算结果中的小数位是不精确的！！！所以尽量避免整数与浮点比较。</p><h3 id="str-函数"><a href="#str-函数" class="headerlink" title="str()函数"></a>str()函数</h3><p>如果想将数字拼接进字符串中，则要使用该函数将数字转换为字符串，如果没有使用，则在运行时会引发错误。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd birthday&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy 23rd birthday</span><br></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python使用#号进行注释，#号后面的内容会被编译器忽略。</p><h1 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h1><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>我们不能直接对列表进行输出，因为会将列表内部表示的全打印，包括方括号。<br>访问列表方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><br>如果想访问全部，用循环。</p><h2 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h2><p>使用<strong>append()函数</strong>进行添加，添加到列表的末尾。<br>该函数使用方法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;,&#x27;ducati&#x27;]</span><br></pre></td></tr></table></figure><br>我们可以不在方括号里添加变量，创建一个空列表，空列表里的元素可以在程序运行后通过append()函数进行添加。<br>使用<strong>insert()函数</strong>可以在列表的任意位置添加元素，需要指定索引和值。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.insert(<span class="number">0</span>,<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;ducati&#x27;,&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure></p><h2 id="在列表里删除元素"><a href="#在列表里删除元素" class="headerlink" title="在列表里删除元素"></a>在列表里删除元素</h2><p>使用<strong>del语句</strong>进行删除。<br>该语句使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><br>使用<strong>pop()函数</strong>将列表里的元素进行删除，专用术语<strong>弹出</strong>，弹出的是列表里末尾的元素。(即弹出栈顶元素)弹出的值可以被变量接收。<br>该函数使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">popped_motorcycles = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;]</span><br><span class="line">suzuki</span><br></pre></td></tr></table></figure><br>我们还可以在pop()函数中加入索引指定弹出列表中的某个元素。<br>注:关于del语句与pop()函数的使用判断标准:如果你不在使用列表中删除的元素，则使用del。如果你还想继续使用列表中删除的元素，则使用pop()。<br>如果不知道列表中元素的位置，则<strong>remove()函数</strong>可以删除列表里函数的值。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;,&#x27;ducati&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure></p><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h3><p>如果想对一个乱序的列表进行永久性的排序，则需要用到<strong>sort()函数</strong>，如果想倒序，则需要在函数里添加参数reverse=True。<br>该函数的用法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;audi&#x27;,&#x27;bmw&#x27;,&#x27;subaru&#x27;,toyota]</span><br></pre></td></tr></table></figure><br>如果只想对列表进行临时排序，则使用<strong>sorted()函数</strong>，如果想倒序同上。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Here is the original list:</span><br><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br><span class="line"></span><br><span class="line">Here is the sorted list:</span><br><span class="line">[&#x27;audi&#x27;,&#x27;bmw&#x27;,&#x27;subaru&#x27;,toyota]</span><br><span class="line"></span><br><span class="line">Here is the original list again:</span><br><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br></pre></td></tr></table></figure><br>如果你想倒着打印列表，则使用<strong>reverse()函数</strong>。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br><span class="line">[&#x27;subaru&#x27;,&#x27;toyota&#x27;,&#x27;audi&#x27;,&#x27;bmw&#x27;]</span><br></pre></td></tr></table></figure><br>如果想恢复原来的列表，只需再次调用该函数。<br><strong>有与C语言数组不同的是Python里的索引可以用负数！</strong></p><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>如果你想遍历整个列表里的元素，则需要用到循环。Python的循环与C语言的循环写法大有不同，在遍历列表的循环里你可以不告诉循环什么时候截止。前面讲过Python的变量不需要定义即可使用，所以我们可以直接在循环语句里加入变量，但是这个变量是用来储存列表里的元素的。<br>Python的循环语句如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alice</span><br><span class="line">davd</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure><br>Python的循环会执行循环下面缩进的语句，没有进行缩进的语句则不会进入循环，同时也避免不必要的缩进。<br><strong>注意:不要遗漏了 : 号！！！</strong>，否则将导致语法错误。</p><h3 id="创建数字列表"><a href="#创建数字列表" class="headerlink" title="创建数字列表"></a>创建数字列表</h3><p>使用<strong>range()函数</strong>可以轻松生成一系列数字，还可以指定步长。<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br>range()函数指定步长使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure><br>使用该函数生成数字时出现在编程语言中差一行的结果，如果出现不符合预期，则可以尝试将指定的值加1或者减1。<br>使用<strong>list()函数</strong>可以直接将<strong>range()函数</strong>的结果直接转换为列表<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure><br>在Python中可以使用空列表，如以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)            <span class="comment">#在Python中两个**代表乘方运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,4,9,16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure><br>Python中提供<strong>min()函数，max()函数和sum()函数等</strong>，直接处理数字列表。</p><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><p>在欣赏别人的代码时，可能会出现以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><br>这个代码将for循环和创建新元素的代码合并成一行，并自动附加新元素，该情况有个专有名词叫<strong>列表解析</strong>，与上面循环不同的是，这个循环<strong>没有 : 号</strong>。</p><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>处理列表里的部分元素，在Python中被称为<strong>切片</strong>。<br>我们在列表中增加索引，既可创建切片，示例如下<br>示例一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;charles&#x27;,&#x27;martina&#x27;,&#x27;micheal&#x27;]</span><br></pre></td></tr></table></figure><br>示例二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;martina&#x27;,&#x27;micheal&#x27;,&#x27;florence&#x27;]</span><br></pre></td></tr></table></figure><br>示例三<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;charles&#x27;,&#x27;martina&#x27;,&#x27;micheal&#x27;,&#x27;florence&#x27;]</span><br></pre></td></tr></table></figure><br>示例四<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;micheal&#x27;,&#x27;florence&#x27;,&#x27;eli&#x27;]</span><br></pre></td></tr></table></figure><br>示例五<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;micheal&#x27;,&#x27;florence&#x27;,&#x27;eli&#x27;]</span><br></pre></td></tr></table></figure><br>总结，没有指定第一个索引时，列表重头开始，没有指定第二个索引时，列表在末尾终止，列表的索引用负数，则表示列表从末尾开始的后几个元素。</p><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>我们经常需要根据既有列表创建全新列表，那么列表的复制对我们则尤为重要了，复制整个列表的方法为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_food = my_food[:]                    <span class="comment">#错误写法friend_food = my_food</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure><br>既省略起始索引和终止索引。<br>复制部分列表，我就不再举例了。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><p>元组用于存放一系列不可修改的元素。<br>如何定义元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure><br>元组看似像列表，但使用的却是圆括号而不是方括号，访问元组里的元素和访问列表里的元素方法一样。</p><h3 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h3><p>这个属实是把我震惊到了，储存元组的变量还能被再次赋值，操作如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Original dimension:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line"></span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure><br>这么说来，我们可以重新定义整个元组。</p><h3 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h3><p>这个为程序员的自我修养，上网查吧，小可爱们。</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>和C语言的差不多，就是不用加括号而已，看着看着就会用了。</p><h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><p>每条if语句的核心都是一个值为True或False的表达式(bool表达式)，这种表达式被称为条件测试，普通的比较那些我就不记上了，因为是个人都会比大小(doge)。</p><h3 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h3><p>在Python里直接用and和or来进行，以下的示例代码我都以提高可读性去写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(age_0 &gt;= <span class="number">21</span>) <span class="keyword">and</span> (age_1 &gt;= <span class="number">21</span>)</span><br><span class="line">(age_0 &gt;= <span class="number">21</span>) <span class="keyword">or</span> (age_1 &gt;= <span class="number">21</span>)</span><br></pre></td></tr></table></figure></p><h3 id="检查特定值在不在列表内"><a href="#检查特定值在不在列表内" class="headerlink" title="检查特定值在不在列表内"></a>检查特定值在不在列表内</h3><p>以下两个示例十分清楚的展示了如何检查<br>示例一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">football_players = [<span class="string">&#x27;Ronaldo&#x27;</span>,<span class="string">&#x27;Messi&#x27;</span>,<span class="string">&#x27;Neymar&#x27;</span>]</span><br><span class="line">mvp = <span class="string">&#x27;Messi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mvp <span class="keyword">in</span> football_players:</span><br><span class="line">    <span class="built_in">print</span>(mvp + <span class="string">&quot; you are the Golden Globe winner!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Messi you are the Golden Globe winner</span><br></pre></td></tr></table></figure><br>示例二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">football_players = [<span class="string">&#x27;Ronaldo&#x27;</span>,<span class="string">&#x27;Messi&#x27;</span>,<span class="string">&#x27;Neymar&#x27;</span>]</span><br><span class="line">before = <span class="string">&#x27;Maradona&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> before <span class="keyword">not</span> <span class="keyword">in</span> football_players:</span><br><span class="line">    <span class="built_in">print</span>(before + <span class="string">&quot;, he is history&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maradona, he is history</span><br></pre></td></tr></table></figure></p><h2 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h2><h3 id="if简单的用法"><a href="#if简单的用法" class="headerlink" title="if简单的用法"></a>if简单的用法</h3><p>参考前面的程序，不做过多介绍。</p><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><p>用一小段代码简单介绍一下用法<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">19</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry,you are too young to vote.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 19!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sorry,you are too young to vote.</span><br><span class="line">Please register to vote as soon as you turn 19!</span><br></pre></td></tr></table></figure></p><h3 id="if-elif-else结构"><a href="#if-elif-else结构" class="headerlink" title="if-elif-else结构"></a>if-elif-else结构</h3><p>如果检查的对象超过两个时，则使用该结构，该结构会检查每个测试条件，知道遇到通过的测试条件，执行紧跟的代码，并跳过余下的测试。<br>该结构的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your admission cost is $5</span><br></pre></td></tr></table></figure><br>我们可以根据需要使用任意数量的elif代码块，有时为了安全起见，我们可以省略else代码块来避免无效数据与而恶意数据。</p><h3 id="测试多个条件"><a href="#测试多个条件" class="headerlink" title="测试多个条件"></a>测试多个条件</h3><p>if-elif-else结构虽然强大，但是只适用于测试一个特定的条件。如果要检查我们所有关心的条件，我们则需要使用多个if语句，示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding mushrooms.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding pepperoni.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;extra cheese&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding extra cheese.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms</span><br><span class="line">Adding extra cheese</span><br><span class="line"></span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure><br>if-elif-else结构测试的条件只要满足就会执行相应的代码块，并跳过余下的测试，所以在这个程序里不能使用该结构。</p><h3 id="用if语句处理列表"><a href="#用if语句处理列表" class="headerlink" title="用if语句处理列表"></a>用if语句处理列表</h3><h3 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h3><p>用一小段代码教大家如何使用。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping == <span class="string">&#x27;green papper&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we are out of green peppers right now.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms.</span><br><span class="line">Sorry, we are out of green peppers right now.</span><br><span class="line">Adding extra cheese.</span><br><span class="line"></span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure></p><h3 id="确定列表不为空"><a href="#确定列表不为空" class="headerlink" title="确定列表不为空"></a>确定列表不为空</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want a plain pizza?</span><br></pre></td></tr></table></figure></p><h3 id="使用多个列表"><a href="#使用多个列表" class="headerlink" title="使用多个列表"></a>使用多个列表</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">available_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;olives&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;pepperoni&#x27;</span>,<span class="string">&#x27;pineapple&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;french fries&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we don&#x27;t have &quot;</span> + requested_topping + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms.</span><br><span class="line">Sorry we don&#x27;t have french fries.</span><br><span class="line">Adding extra cheese.</span><br><span class="line"></span><br><span class="line">Finish making your pizza!</span><br></pre></td></tr></table></figure></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><p>字典是<strong>一系列键-值对</strong>，用{}括号括起，示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;point&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><br>访问字典，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">green</span><br></pre></td></tr></table></figure><br>返回的是与键相关的值。</p><h3 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5,&#x27;x_position&#x27;: 0,&#x27;y_position&#x27;: 25&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is now &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The alien is green.</span><br><span class="line">The alien is now yellow.</span><br></pre></td></tr></table></figure></p><h3 id="删除键-值对"><a href="#删除键-值对" class="headerlink" title="删除键-值对"></a>删除键-值对</h3><p>使用del语句删除，删除时要指定字典名和要删除的键。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><p>使用循环和<strong>items()函数</strong>，但需要两个变量，一个存放键，一个存放值。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,<span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nKey: &quot;</span> + key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Value: &quot;</span> + value)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Key: last</span><br><span class="line">Value: fermi</span><br><span class="line"></span><br><span class="line">Key: first</span><br><span class="line">Value: enrico</span><br><span class="line"></span><br><span class="line">Key: username</span><br><span class="line">Value: efermi</span><br></pre></td></tr></table></figure></p><h3 id="遍历字典中所有的键"><a href="#遍历字典中所有的键" class="headerlink" title="遍历字典中所有的键"></a>遍历字典中所有的键</h3><p>使用<strong>keys()函数</strong>，该函数还可以用于检测单个键(把程序里的变量换成你想检测的键即可)，该函数的用法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,<span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br></pre></td></tr></table></figure><br>如果想按顺序遍历则只需将favorite_languages.keys()改为sorted(favorite_languages.keys())。</p><h3 id="遍历字典中所有的值"><a href="#遍历字典中所有的值" class="headerlink" title="遍历字典中所有的值"></a>遍历字典中所有的值</h3><p>使用<strong>values()函数</strong>，该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,<span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><br>如果字典中的值有重复的，可以使用<strong>set()函数</strong>来找出其中独一无二的元素，并使用这些元素创建一个集合，只需把程序里的favorite_languages.values()改为set(favorite_languages.values())即可。</p><h2 id="嵌套字典"><a href="#嵌套字典" class="headerlink" title="嵌套字典"></a>嵌套字典</h2><h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><p>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_0,alien_1,alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="built_in">print</span>(alien)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 10&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 15&#125;</span><br></pre></td></tr></table></figure></p><h3 id="在字典中储存列表"><a href="#在字典中储存列表" class="headerlink" title="在字典中储存列表"></a>在字典中储存列表</h3><p>示例代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pizza = &#123;<span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,<span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mushrooms</span><br><span class="line">extra cheese</span><br></pre></td></tr></table></figure><br>如果想输出字典里键值对键对应列表里的值，则需要使用嵌套循环。(如果不懂，Python编程从入门到实践P96页的favorite_languages.py)</p><h3 id="字典中储存字典"><a href="#字典中储存字典" class="headerlink" title="字典中储存字典"></a>字典中储存字典</h3><p>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> username,user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>]</span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Username: aeinstein</span><br><span class="line">        Full name: Albert Einstein</span><br><span class="line">        Location: Princeton</span><br><span class="line"></span><br><span class="line">Username: mcurie</span><br><span class="line">        Full name: Marie Curie</span><br><span class="line">        Location: Paris</span><br></pre></td></tr></table></figure><br>学到后面的话要注意每位用户的字典都包含不同的键，for循环里会更复杂。</p><h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h1><h2 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h2><p>Python的<strong>input()函数</strong>包含了函数内字符串的输出与输入，且在反回时，只返回用户输入的值。<br>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;Please enter your name: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your name: Alex</span><br><span class="line">Hello, Alex!</span><br></pre></td></tr></table></figure><br>使用input()函数Python默认将用户输入的解读为字符串，如果想字符串转为整型则需要用到<strong>int()函数</strong>。需要将想转换的变量放进去int()函数就行了。</p><h2 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用while循环</h2><h3 id="简单使用Python循环"><a href="#简单使用Python循环" class="headerlink" title="简单使用Python循环"></a>简单使用Python循环</h3><p>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br>还可以直接用于检测字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span>                         <span class="comment"># +=在存储在变量中的字符串末尾附加一个字符串</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>：</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><br>输出结果就不写了。<br>我们也可以使用<strong>标志</strong>。<br>如在上述程序中加入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">active = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br>将循环改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> active:</span><br></pre></td></tr></table></figure><br>当输入的为’quit’时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">active = <span class="literal">False</span></span><br></pre></td></tr></table></figure><br>使用<strong>break语句</strong>可以跳出整个循环，如果程序执行了break语句则后面的代码直接跳过，学过C语言的都知道咋用。(doge)<br>使用<strong>continue语句</strong>可以跳出单次循环，如果程序执行了continue则后面的语句直接跳过，学过C语言的都知道咋用。(doge)</p><h2 id="使用while循环处理列表和字典"><a href="#使用while循环处理列表和字典" class="headerlink" title="使用while循环处理列表和字典"></a>使用while循环处理列表和字典</h2><h3 id="列表之间移动元素"><a href="#列表之间移动元素" class="headerlink" title="列表之间移动元素"></a>列表之间移动元素</h3><p>列表之间移动元素，使用<strong>pop()函数</strong>将原列表中的元素弹出后再将其加入到其他列表中，用于验证某些方面的东西，如以下代码就是用于验证用户是否注册。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;brian&#x27;</span>,<span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    <span class="built_in">print</span>(confirmed_user.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line"></span><br><span class="line">The following users have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></table></figure></p><h3 id="删除包含特定值的所有元素"><a href="#删除包含特定值的所有元素" class="headerlink" title="删除包含特定值的所有元素"></a>删除包含特定值的所有元素</h3><p>代码示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">people = [<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;simple&#x27;</span>,<span class="string">&#x27;git&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;alex&#x27;</span> <span class="keyword">in</span> people:</span><br><span class="line">    people.remove(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(people)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;john&#x27;,&#x27;simple&#x27;,&#x27;git&#x27;]</span><br></pre></td></tr></table></figure></p><h3 id="填充字典"><a href="#填充字典" class="headerlink" title="填充字典"></a>填充字典</h3><p>先键后值。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125;</span><br><span class="line"></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>)</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;Whitch mountain would you like to climb someday? &quot;</span>)</span><br><span class="line">    responses[name] = response</span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&quot;World you like to let another person respond?(yes/no) &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        polling_active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name,response <span class="keyword">in</span> responses.items():</span><br><span class="line">    <span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">Whitch mountain world you like to climb someday? Denali</span><br><span class="line">World you like to let another person respond?(yes/no) no</span><br><span class="line"></span><br><span class="line">--- Poll Results ---</span><br><span class="line">Eric would like to climb Denali.</span><br></pre></td></tr></table></figure><br>先键后值，先键后值，先键后值，明明白白。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="简单使用函数"><a href="#简单使用函数" class="headerlink" title="简单使用函数"></a>简单使用函数</h2><p>定义一个函数使用的是<strong>def语句</strong>，如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><br>向函数传递信息，将上面的代码完善一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span> + username.title() + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user(<span class="string">&#x27;Alex&#x27;</span>)</span><br></pre></td></tr></table></figure><br>上面就是简单的使用了一下调用函数。</p><h2 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h2><p>实参和形参的概念我就不多讲了，C语言里有说。</p><h3 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h3><p>在调用函数时，实参与形参的关联顺序是基于实参的顺序的，这种叫<strong>位置实参</strong>。在调用时得注意实参与形参得顺序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type,pet_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br></pre></td></tr></table></figure><br>在调用函数的时候还有一种叫<strong>关键字实参</strong>，在使用关键字实参时就不用调整顺序了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type,pet_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>,animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br></pre></td></tr></table></figure></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>在编写调用函数时，我们可以给形参指定一个<strong>默认值</strong>，在实参的传递中，如果提供了实参，则使用实参，否则使用默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">pet_name,animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a dog.</span><br><span class="line">My dog&#x27;s name is Willie.</span><br></pre></td></tr></table></figure><br>注意，在函数的定义中，修改了形参的排列顺序，在调用时只包含一个实参，但是Python仍然将这个实参视为位置实参，所以需要将pet_name放在开头的原因。</p><h3 id="避免实参错误"><a href="#避免实参错误" class="headerlink" title="避免实参错误"></a>避免实参错误</h3><p>在使用函数时避免实参的不匹配错误，虽然编译器给予你提示，但在使用位置实参的时候，还是要注意实参与形参的位置。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><h3 id="简单使用返回值"><a href="#简单使用返回值" class="headerlink" title="简单使用返回值"></a>简单使用返回值</h3><p>与C语言的没什么很大的区别，C语言里的咋用，在这边基本都能用，简单几个程序，概括了。<br>示例一：简单使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name,last_name</span>):</span></span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure><br>示例二：让实参变成可选<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name,last_name,middle_name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;lee&#x27;</span>,<span class="string">&#x27;hooker&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jimi Hendrix</span><br><span class="line">John Lee Hooker</span><br></pre></td></tr></table></figure><br>示例三：返回字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span>(<span class="params">first_name,last_name,age=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name,<span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;hendrix&#x27;</span>,age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;first&#x27;: jimi,&#x27;last&#x27;: hendrix,&#x27;age&#x27;: 27&#125;</span><br></pre></td></tr></table></figure><br>示例三：结合while循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name,last_name</span>):</span></span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(enter &#x27;q&#x27; at any time to quit)&quot;</span>)</span><br><span class="line">    f_name = <span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name = <span class="built_in">input</span>(<span class="string">&quot;Last name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">formatted_name = get_formatted_name(f_name,l_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + formatted_name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Please tell me your name:</span><br><span class="line">(enter &#x27;q&#x27; at any time to quit)</span><br><span class="line">First name:Alex</span><br><span class="line">Last name:Li</span><br><span class="line"></span><br><span class="line">Hello, Alex Li!</span><br><span class="line"></span><br><span class="line">Please tell me your name:</span><br><span class="line">(enter &#x27;q&#x27; at any time to quit)</span><br><span class="line">First name:q</span><br></pre></td></tr></table></figure></p><h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">unexamined_students = [<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;balle&#x27;</span>]</span><br><span class="line">examined_students = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish_students</span>(<span class="params">unexamined_students,examined_students</span>):</span></span><br><span class="line">    <span class="keyword">while</span> unexamined_students:</span><br><span class="line">        examined_student = unexamined_students.pop()</span><br><span class="line">        <span class="built_in">print</span>(examined_student.title() + <span class="string">&quot; you are finished the exam!&quot;</span>)</span><br><span class="line">        examined_students.append(examined_student)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_finished_students</span>(<span class="params">examined_students</span>):</span></span><br><span class="line">    <span class="keyword">for</span> finished_student <span class="keyword">in</span> examined_students:</span><br><span class="line">        <span class="built_in">print</span>(finished_student.title() + <span class="string">&quot; you have done&quot;</span>)</span><br><span class="line"></span><br><span class="line">finish_students(unexamined_students,examined_students)</span><br><span class="line">show_finished_students(examined_students)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Balle you are finished the exam!</span><br><span class="line">John you are finished the exam!</span><br><span class="line">Alex you are finished the exam!</span><br><span class="line">Balle you have done</span><br><span class="line">John you have done</span><br><span class="line">Alex you have done</span><br></pre></td></tr></table></figure><br>使用切片的方法向函数传递一个列表的副本，这样可以保留原来列表里的内容，从而达到保留列表信息的目的。<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finish_students(unexamined_students[:],examined_students)</span><br></pre></td></tr></table></figure></p><h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><p>传递任意数量的实参，可以用<strong>*号加变量名</strong>让Python创建一个空元组，这样就可以收集任意数量的实参。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">*toppings</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushroom&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- mushroom</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><br>结合使用位置实参和任意数量的实参<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">size,*toppings</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>,<span class="string">&#x27;mushroom&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushroom</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><br>使用用关键字实参<br>Python用**号加变量名创建一个空字典<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span>(<span class="params">first,last,**user_info</span>):</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;li&#x27;</span>,location=<span class="string">&#x27;dg&#x27;</span>,fiel=<span class="string">&#x27;superman&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;first_name&#x27;: &#x27;alex&#x27;,&#x27;last_name&#x27;: &#x27;li&#x27;,&#x27;loaction&#x27;: &#x27;dg&#x27;,&#x27;fiel&#x27;: &#x27;superman&#x27;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h2><h3 id="导入其他-py文件里的代码方法"><a href="#导入其他-py文件里的代码方法" class="headerlink" title="导入其他.py文件里的代码方法"></a>导入其他.py文件里的代码方法</h3><p>使用<strong>import语句</strong>进行导入，使用这种方法导入所有代码需要在使用时带上包名(过久了看不懂的话看第一版Python编程从入门到实践P134页)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;filename&gt;</span><br></pre></td></tr></table></figure><br>使用<em>号运算符也可以导入所用模块，不同的是使用这种方法的话就不需要加包名。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> &lt;filename&gt; <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><br><em>*以上就是两种导入包中所有函数的方法。</em></em><br>导入特定函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> &lt;filename&gt; <span class="keyword">import</span> &lt;filename_function&gt;</span><br></pre></td></tr></table></figure></p><h3 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用as给模块指定别名</h3><p>如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> names <span class="keyword">as</span> n</span><br><span class="line"></span><br><span class="line">n.put_name(<span class="string">&#x27;alex&#x27;</span>)</span><br></pre></td></tr></table></figure><br>知道如何使用即可。</p><h3 id="如何编写一个完美的函数"><a href="#如何编写一个完美的函数" class="headerlink" title="如何编写一个完美的函数"></a>如何编写一个完美的函数</h3><p><strong>在编写一个函数时要给函数名指定描述性名称，且只在其中使用小写字母和下滑线。每个函数都应该简要的阐述其功能的注释。在给形参指定默认值时，等号两边不要有空格，在函数调用中的关键字实参，也要遵守这种规定。要学会缩进，便于他人阅读。</strong></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>根据类来创建对象的方法被称为<strong>实例化</strong>。<br>可以通过实例来访问的变量称为<strong>属性</strong>。</p><h2 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h2><h3 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h3><p>根据人物的信息创建一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,name,age</span>):</span>         <span class="comment">#初始化属性name和age</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is setting now.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure><br><strong>在类中的函数被称为方法</strong><br>在这个代码中，使用了方法<em>init</em>()，这个方法是一种特殊的方法，每次要根据Dog类创建一个新实例时，Python每次都要自动运行它。命名规定中要在init的前后加上下滑线，避免与普通方法发生冲突。<br>在这个方法的定义中形参self必不可少，且self形参必须在其他形参前面，原因是因为Python在调用<em>init</em>()这个方法来创建实例时，会<strong>自动传传入实参self</strong>。与每个类相关联的的方法调用都会自动传递实参self，它是一个指向实例本身的引用，让实例可以访问类中的属性和方法。</p><h3 id="创建一个实例"><a href="#创建一个实例" class="headerlink" title="创建一个实例"></a>创建一个实例</h3><p><strong>创建实例</strong>，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;world&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog age is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><br><strong>调用方法</strong>，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;world&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll_over()</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">World is now setting.</span><br><span class="line">World rolled over!</span><br></pre></td></tr></table></figure><br>创建多个实例，模仿上面的代码创建就行了，<strong>注意在创建新的实例时传递进去的self实参要不一样。</strong></p><h2 id="使用类和实例"><a href="#使用类和实例" class="headerlink" title="使用类和实例"></a>使用类和实例</h2><p>先编写一个Car类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">        <span class="title">long_name</span> = <span class="title">str</span>(<span class="params">self.year</span>) + &#x27; &#x27; + <span class="title">self</span>.<span class="title">make</span> + &#x27; &#x27; + <span class="title">self</span>.<span class="title">model</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">long_name</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">my_new_car</span> = <span class="title">Car</span>(<span class="params"><span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="params">my_new_car.get_descriptive_name(<span class="params"></span>)</span>)</span></span><br></pre></td></tr></table></figure></p><h3 id="给属性指定默认值"><a href="#给属性指定默认值" class="headerlink" title="给属性指定默认值"></a>给属性指定默认值</h3><p><strong>在类中每个属性都必须有初始值</strong>。<br>下面继续完善上面的类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        --snip--</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it&quot;</span>)</span><br><span class="line">    </span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 0 miles on it.</span><br></pre></td></tr></table></figure></p><h3 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h3><p>有三种方法修改属性的值<br>第一种，直接修改属性的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_new_car.otometer_reading = <span class="number">23</span></span><br></pre></td></tr></table></figure><br>第二种，通过方法修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_otometer</span>(<span class="params">self,mileage</span>):</span></span><br><span class="line">        self.otometer_reading = mileage</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_otometer(<span class="number">23</span>)</span><br><span class="line">my_new_car.read_otometer()</span><br></pre></td></tr></table></figure><br>第三种，通过方法对属性的值进行递增<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_otometer</span>(<span class="params">self,mileage</span>):</span></span><br><span class="line">        --snip--</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_otometer</span>(<span class="params">self,miles</span>):</span></span><br><span class="line">        self.otometer_reading += miles</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_used_car.update_otometer(<span class="number">23500</span>)</span><br><span class="line">my_used_car.read_otometer()</span><br><span class="line"></span><br><span class="line">my_used_car.increment_otometer(<span class="number">100</span>)</span><br><span class="line">my_used_car.read_otometer()</span><br></pre></td></tr></table></figure></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>子类继承父类的所有属性和方法</strong></p><h3 id="子类的方法init"><a href="#子类的方法init" class="headerlink" title="子类的方法init()"></a>子类的方法<em>init</em>()</h3><p>父类使用Car类，继承写法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make,model,year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure><br>创建子类时，父类必须在同一个文件里，且必须要位于子类前面。<strong>super()函数</strong>是一个特殊的函数，它帮助Python将父类和子类联系起来。</p><h3 id="子类定义属性和方法"><a href="#子类定义属性和方法" class="headerlink" title="子类定义属性和方法"></a>子类定义属性和方法</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self,battery_size) + <span class="string">&quot;kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure></p><h3 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h3><p>如果父类的方法不符合子类模拟的实物的行为，都可以对其进行重写。只要在子类中定义一个方法与父类方法同名即可，这样Python就不会考虑父类的方法，只关注子类中定义的相应方法。</p><h3 id="将实例作为属性"><a href="#将实例作为属性" class="headerlink" title="将实例作为属性"></a>将实例作为属性</h3><p>在自己给类添加的细节越来越多时，我们可能需要将类的一部分作为一个独立的类提取出来，将大类分成多个小类。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,battery_size=<span class="number">70</span></span>):</span></span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make,model,year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tasla.battery.describe_battery()</span><br></pre></td></tr></table></figure><br>如果想要修改电瓶容量，只需要提供一个值即可。</p><h3 id="导入其他模块里的类"><a href="#导入其他模块里的类" class="headerlink" title="导入其他模块里的类"></a>导入其他模块里的类</h3><p>和导入.py文件里函数的方法一样，不做过多的笔记了。(需要注意一下的是继承这个问题)</p><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><h2 id="读取一个文件"><a href="#读取一个文件" class="headerlink" title="读取一个文件"></a>读取一个文件</h2><p>使用<strong>read()函数</strong>，使用这个函数时，该函数会在末尾自动添加一个空字符串，使用rstrip()函数将其清除即可。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents.rstrip())</span><br></pre></td></tr></table></figure><br>想要逐行读取文件，只需使用循环语句即可。<br>创建一个包含文件内各行内容的列表，只需要使用<strong>readlines()函数</strong>即可。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(lines.rstrip())</span><br></pre></td></tr></table></figure><br>使用文件的内容<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure><br><strong>此处的pi_string变量需要初始化，是因为在使用+=运算符时需要知道pi_string自身的情况，而for循环里的line生成就是被用的，所以已经进行了初始化。</strong><br>如果这个文件里包含了很多为数字，而你只想打印部分，只需要在输出中对存储列表的那个变量使用切片即可。<br>你想判断某个东西是否在这个文件中，只需要结合写读取文件的代码加上if语句判断即可。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>只需在将with open这条语句改写即可，打开文件时，我们可以指定<strong>读写模式(‘r’),写入模式(‘w’),附加模式(‘a’),读取和写入模式(‘r+’)</strong>。使用写入模式时要小心，如果在写入前已存在该文件，则它会在使用前清空里面的内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><br>再使用<strong>write()函数</strong>进行写入，可以在你想写入的语句后面加上转义避免两行的语句写进了一行。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>处理<strong>ZeroDivisionError异常</strong><br>使用<strong>try-except-else代码块</strong>块处理<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two number, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&quot;Second number&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number)/<span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure><br>处理<strong>FileNotFoundError异常</strong><br>使用<strong>try-except-else代码块</strong>块处理，使用方法同上。</p><h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><p>使用<strong>split()函数</strong><br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">&quot;Sorry, the file &quot;</span> + filename + <span class="string">&quot;does not exist.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = <span class="built_in">len</span>(words)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The file &quot;</span> + filename + <span class="string">&quot; has about&quot;</span> + <span class="built_in">str</span>(num_words) + <span class="string">&quot; words.&quot;</span>)</span><br></pre></td></tr></table></figure><br>如果想使用多个文本，使用函数调用就行了。如果想在失败时让程序<strong>一声不吭</strong>，只需要在<strong>except该行后面改写为pass语句</strong>。</p><h3 id="使用json文件存储数据"><a href="#使用json文件存储数据" class="headerlink" title="使用json文件存储数据"></a>使用json文件存储数据</h3><p>使用<strong>json.dump()函数</strong>和<strong>json.load()函数</strong>。在代码的前面要加上import json，调用json包。<br>json.dump()函数接受两个参数，一个是要存储的数据，一个是文件对象，存储进去的格式与Python中的一样。<br>json.load()函数，在里面补充文件路径，然后再将文件里面的内容存储在Python里面的一个变量中，使用时直接使用变量即可。尝试储存一个用户信息<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;文件名.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We will remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>将代码做进一步的改进，将代码划分为一系列完成具体工作的函数，这样被称为重构。</p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><hr><h1 id="错误修复篇"><a href="#错误修复篇" class="headerlink" title="错误修复篇"></a>错误修复篇</h1><h2 id="No-module-named-‘pip’异常"><a href="#No-module-named-‘pip’异常" class="headerlink" title="No module named ‘pip’异常"></a>No module named ‘pip’异常</h2><p>Windows解决如下<br>打开cmd输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip</span><br></pre></td></tr></table></figure><br>再输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><br>升级pip即可</p><h1 id="换源下载篇"><a href="#换源下载篇" class="headerlink" title="换源下载篇"></a>换源下载篇</h1><p>中科大的源<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 某个包 -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;font color=#FF0000&gt;以下的程序都是在Python3下运行，主要是给自己看的，代码没有任何的注释，所以可能对读者不咋友好。&lt;/font&gt;

&lt;h1 id=&quot;变量和简单的数据类型&quot;&gt;&lt;a href=&quot;#变量和简单的数据类型&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
</feed>
