<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My World</title>
  
  
  <link href="https://godofl.github.io/atom.xml" rel="self"/>
  
  <link href="https://godofl.github.io/"/>
  <updated>2022-03-14T12:10:18.649Z</updated>
  <id>https://godofl.github.io/</id>
  
  <author>
    <name>GODOFL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://godofl.github.io/2022/03/14/PHP%20notes/"/>
    <id>https://godofl.github.io/2022/03/14/PHP%20notes/</id>
    <published>2022-03-14T11:04:28.486Z</published>
    <updated>2022-03-14T12:10:18.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="php变量规则"><a href="#php变量规则" class="headerlink" title="php变量规则"></a>php变量规则</h2><ol><li>变量以$符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母，数字以及下划线</li><li>变量名不能包含空格</li><li>变量名是区分大小写的</li></ol><h2 id="php输出语句区别"><a href="#php输出语句区别" class="headerlink" title="php输出语句区别"></a>php输出语句区别</h2><p>echo 与 print语句:</p><ol><li>echo 输出的是字符串，print 输出的是数字</li><li>echo 输出的速度比print快，echo没有返回值，print 有返回值1</li></ol><h2 id="EOF使用说明"><a href="#EOF使用说明" class="headerlink" title="EOF使用说明"></a>EOF使用说明</h2><ol><li>必须后接分号，否则编译不通过</li><li>EOF可以用任意其他字符代替，只需保证结束标识与开始标识一致</li><li>结束标识必须顶格独占一行</li><li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号</li><li>单内容需要内嵌引号时，不需要加转义符，本身对单引号转义</li></ol><h2 id="PHP类型比较"><a href="#PHP类型比较" class="headerlink" title="PHP类型比较"></a>PHP类型比较</h2><ol><li>松散比较：使用两个==等号，只比较值，没有类型</li><li>严格比较：用三个等号===，除了比较值，也比较类型</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;php变量规则&quot;&gt;&lt;a href=&quot;#php变量规则&quot; class=&quot;headerlink&quot; title=&quot;php</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://godofl.github.io/2021/11/15/Python%20notes/"/>
    <id>https://godofl.github.io/2021/11/15/Python%20notes/</id>
    <published>2021-11-15T04:25:51.318Z</published>
    <updated>2022-03-14T12:18:04.298Z</updated>
    
    <content type="html"><![CDATA[<font color=#FF0000>以下的程序都是在Python3下运行，主要是给自己看的，代码没有任何的注释，所以可能对读者不咋友好。</font><h1 id="变量和简单的数据类型"><a href="#变量和简单的数据类型" class="headerlink" title="变量和简单的数据类型"></a>变量和简单的数据类型</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在程序中可以随时修改变量的值，Python始终记录的是变量的最新值。<br>关于变量的命名与使用和C语言没什么区别，除了i与O要谨慎使用(可能会被看成1和0)。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>与C语言不同的是Python的字符串是用<strong>引号</strong>(<strong>单引号和双引号</strong>)扩起，看似简单，其实使用的方式有很多。</p><h3 id="修改字符串的大小写"><a href="#修改字符串的大小写" class="headerlink" title="修改字符串的大小写"></a>修改字符串的大小写</h3><p>使用<strong>title()函数</strong>，title()函数是将字符串里的每个单词首字母大写。title()函数括号里是空的是因为title()函数不需要提供额外的信息。<br>使用title()，使用代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;ada lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ada Lovelace</span><br></pre></td></tr></table></figure><br>还有两个函数upper()和lower()函数，与C语言不同的是这两个函数改的是<strong>整串</strong>字符串，用法与title()函数相同。</p><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>相比C语言，Python的字符串拼接大有不同，Python的字符串拼接不需要调用任何函数，可以直接用+号进行<strong>拼接</strong>。<br>字符串拼接的示例如下<br>示例一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(full_name)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><br>示例二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><br>示例三<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span></span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span></span><br><span class="line">full_name = first_name + <span class="string">&quot; &quot;</span> + last_name</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;Hello, &quot;</span> + full_name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></p><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><p>Python提供<strong>strip()函数</strong>用于删除字符串中多余的空白，但删除空白是暂时的，如果想彻底删除，就要将删除后的新值重新存放回原来的变量中。<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&quot; Alex &quot;</span></span><br><span class="line"></span><br><span class="line">my_name = my_name.strip()</span><br><span class="line"><span class="built_in">print</span>(my_name)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alex</span><br></pre></td></tr></table></figure><br>还有<strong>lstrip()函数</strong>和<strong>rstrip()函数</strong>，前者用于删除字符串前的空格，后者用于删除字符串后的空格，strip()函数则是删除字符串里所有的空格。</p><h3 id="使用字符串时避免一些语法错误"><a href="#使用字符串时避免一些语法错误" class="headerlink" title="使用字符串时避免一些语法错误"></a>使用字符串时避免一些语法错误</h3><p>以下有两个示例<br>正确<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;One of Python&#x27;s strengths is its diverse community&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><br>错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&#x27;One of Python&#x27;</span>s strengths <span class="keyword">is</span> its diverse community<span class="string">&#x27;        #错误原因是Python不能正确识别结束位置</span></span><br><span class="line"><span class="string">print(message)</span></span><br></pre></td></tr></table></figure></p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>使用数字类型变量时无需定义是什么类型的变量，可以直接使用。(Python会自动识别)<br>Python可以使用两个乘号表示乘方的运算。<br><strong>注意</strong>：Python中与浮点的计算结果中的小数位是不精确的！！！所以尽量避免整数与浮点比较。</p><h3 id="str-函数"><a href="#str-函数" class="headerlink" title="str()函数"></a>str()函数</h3><p>如果想将数字拼接进字符串中，则要使用该函数将数字转换为字符串，如果没有使用，则在运行时会引发错误。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd birthday&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy 23rd birthday</span><br></pre></td></tr></table></figure></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python使用#号进行注释，#号后面的内容会被编译器忽略。</p><h1 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h1><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>我们不能直接对列表进行输出，因为会将列表内部表示的全打印，包括方括号。<br>访问列表方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><br>如果想访问全部，用循环。</p><h2 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h2><p>使用<strong>append()函数</strong>进行添加，添加到列表的末尾。<br>该函数使用方法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;,&#x27;ducati&#x27;]</span><br></pre></td></tr></table></figure><br>我们可以不在方括号里添加变量，创建一个空列表，空列表里的元素可以在程序运行后通过append()函数进行添加。<br>使用<strong>insert()函数</strong>可以在列表的任意位置添加元素，需要指定索引和值。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.insert(<span class="number">0</span>,<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;ducati&#x27;,&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure></p><h2 id="在列表里删除元素"><a href="#在列表里删除元素" class="headerlink" title="在列表里删除元素"></a>在列表里删除元素</h2><p>使用<strong>del语句</strong>进行删除。<br>该语句使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><br>使用<strong>pop()函数</strong>将列表里的元素进行删除，专用术语<strong>弹出</strong>，弹出的是列表里末尾的元素。(即弹出栈顶元素)弹出的值可以被变量接收。<br>该函数使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">popped_motorcycles = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;]</span><br><span class="line">suzuki</span><br></pre></td></tr></table></figure><br>我们还可以在pop()函数中加入索引指定弹出列表中的某个元素。<br>注:关于del语句与pop()函数的使用判断标准:如果你不在使用列表中删除的元素，则使用del。如果你还想继续使用列表中删除的元素，则使用pop()。<br>如果不知道列表中元素的位置，则<strong>remove()函数</strong>可以删除列表里函数的值。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;,&#x27;ducati&#x27;]</span><br><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure></p><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="列表的排序"><a href="#列表的排序" class="headerlink" title="列表的排序"></a>列表的排序</h3><p>如果想对一个乱序的列表进行永久性的排序，则需要用到<strong>sort()函数</strong>，如果想倒序，则需要在函数里添加参数reverse=True。<br>该函数的用法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;audi&#x27;,&#x27;bmw&#x27;,&#x27;subaru&#x27;,toyota]</span><br></pre></td></tr></table></figure><br>如果只想对列表进行临时排序，则使用<strong>sorted()函数</strong>，如果想倒序同上。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Here is the original list:</span><br><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br><span class="line"></span><br><span class="line">Here is the sorted list:</span><br><span class="line">[&#x27;audi&#x27;,&#x27;bmw&#x27;,&#x27;subaru&#x27;,toyota]</span><br><span class="line"></span><br><span class="line">Here is the original list again:</span><br><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br></pre></td></tr></table></figure><br>如果你想倒着打印列表，则使用<strong>reverse()函数</strong>。<br>该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;bmw&#x27;,&#x27;audi&#x27;,&#x27;toyota&#x27;,&#x27;subaru&#x27;]</span><br><span class="line">[&#x27;subaru&#x27;,&#x27;toyota&#x27;,&#x27;audi&#x27;,&#x27;bmw&#x27;]</span><br></pre></td></tr></table></figure><br>如果想恢复原来的列表，只需再次调用该函数。<br><strong>有与C语言数组不同的是Python里的索引可以用负数！</strong></p><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>如果你想遍历整个列表里的元素，则需要用到循环。Python的循环与C语言的循环写法大有不同，在遍历列表的循环里你可以不告诉循环什么时候截止。前面讲过Python的变量不需要定义即可使用，所以我们可以直接在循环语句里加入变量，但是这个变量是用来储存列表里的元素的。<br>Python的循环语句如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alice</span><br><span class="line">davd</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure><br>Python的循环会执行循环下面缩进的语句，没有进行缩进的语句则不会进入循环，同时也避免不必要的缩进。<br><strong>注意:不要遗漏了 : 号！！！</strong>，否则将导致语法错误。</p><h3 id="创建数字列表"><a href="#创建数字列表" class="headerlink" title="创建数字列表"></a>创建数字列表</h3><p>使用<strong>range()函数</strong>可以轻松生成一系列数字，还可以指定步长。<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br>range()函数指定步长使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure><br>使用该函数生成数字时出现在编程语言中差一行的结果，如果出现不符合预期，则可以尝试将指定的值加1或者减1。<br>使用<strong>list()函数</strong>可以直接将<strong>range()函数</strong>的结果直接转换为列表<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure><br>在Python中可以使用空列表，如以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)            <span class="comment">#在Python中两个**代表乘方运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,4,9,16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure><br>Python中提供<strong>min()函数，max()函数和sum()函数等</strong>，直接处理数字列表。</p><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><p>在欣赏别人的代码时，可能会出现以下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><br>这个代码将for循环和创建新元素的代码合并成一行，并自动附加新元素，该情况有个专有名词叫<strong>列表解析</strong>，与上面循环不同的是，这个循环<strong>没有 : 号</strong>。</p><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>处理列表里的部分元素，在Python中被称为<strong>切片</strong>。<br>我们在列表中增加索引，既可创建切片，示例如下<br>示例一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;charles&#x27;,&#x27;martina&#x27;,&#x27;micheal&#x27;]</span><br></pre></td></tr></table></figure><br>示例二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;martina&#x27;,&#x27;micheal&#x27;,&#x27;florence&#x27;]</span><br></pre></td></tr></table></figure><br>示例三<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;charles&#x27;,&#x27;martina&#x27;,&#x27;micheal&#x27;,&#x27;florence&#x27;]</span><br></pre></td></tr></table></figure><br>示例四<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;micheal&#x27;,&#x27;florence&#x27;,&#x27;eli&#x27;]</span><br></pre></td></tr></table></figure><br>示例五<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;micheal&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;micheal&#x27;,&#x27;florence&#x27;,&#x27;eli&#x27;]</span><br></pre></td></tr></table></figure><br>总结，没有指定第一个索引时，列表重头开始，没有指定第二个索引时，列表在末尾终止，列表的索引用负数，则表示列表从末尾开始的后几个元素。</p><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>我们经常需要根据既有列表创建全新列表，那么列表的复制对我们则尤为重要了，复制整个列表的方法为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_food = my_food[:]                    <span class="comment">#错误写法friend_food = my_food</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure><br>既省略起始索引和终止索引。<br>复制部分列表，我就不再举例了。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><p>元组用于存放一系列不可修改的元素。<br>如何定义元组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure><br>元组看似像列表，但使用的却是圆括号而不是方括号，访问元组里的元素和访问列表里的元素方法一样。</p><h3 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h3><p>这个属实是把我震惊到了，储存元组的变量还能被再次赋值，操作如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Original dimension:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line"></span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure><br>这么说来，我们可以重新定义整个元组。</p><h3 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h3><p>这个为程序员的自我修养，上网查吧，小可爱们。</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>和C语言的差不多，就是不用加括号而已，看着看着就会用了。</p><h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><p>每条if语句的核心都是一个值为True或False的表达式(bool表达式)，这种表达式被称为条件测试，普通的比较那些我就不记上了，因为是个人都会比大小(doge)。</p><h3 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h3><p>在Python里直接用and和or来进行，以下的示例代码我都以提高可读性去写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(age_0 &gt;= <span class="number">21</span>) <span class="keyword">and</span> (age_1 &gt;= <span class="number">21</span>)</span><br><span class="line">(age_0 &gt;= <span class="number">21</span>) <span class="keyword">or</span> (age_1 &gt;= <span class="number">21</span>)</span><br></pre></td></tr></table></figure></p><h3 id="检查特定值在不在列表内"><a href="#检查特定值在不在列表内" class="headerlink" title="检查特定值在不在列表内"></a>检查特定值在不在列表内</h3><p>以下两个示例十分清楚的展示了如何检查<br>示例一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">football_players = [<span class="string">&#x27;Ronaldo&#x27;</span>,<span class="string">&#x27;Messi&#x27;</span>,<span class="string">&#x27;Neymar&#x27;</span>]</span><br><span class="line">mvp = <span class="string">&#x27;Messi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mvp <span class="keyword">in</span> football_players:</span><br><span class="line">    <span class="built_in">print</span>(mvp + <span class="string">&quot; you are the Golden Globe winner!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Messi you are the Golden Globe winner</span><br></pre></td></tr></table></figure><br>示例二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">football_players = [<span class="string">&#x27;Ronaldo&#x27;</span>,<span class="string">&#x27;Messi&#x27;</span>,<span class="string">&#x27;Neymar&#x27;</span>]</span><br><span class="line">before = <span class="string">&#x27;Maradona&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> before <span class="keyword">not</span> <span class="keyword">in</span> football_players:</span><br><span class="line">    <span class="built_in">print</span>(before + <span class="string">&quot;, he is history&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maradona, he is history</span><br></pre></td></tr></table></figure></p><h2 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h2><h3 id="if简单的用法"><a href="#if简单的用法" class="headerlink" title="if简单的用法"></a>if简单的用法</h3><p>参考前面的程序，不做过多介绍。</p><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><p>用一小段代码简单介绍一下用法<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">19</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry,you are too young to vote.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 19!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sorry,you are too young to vote.</span><br><span class="line">Please register to vote as soon as you turn 19!</span><br></pre></td></tr></table></figure></p><h3 id="if-elif-else结构"><a href="#if-elif-else结构" class="headerlink" title="if-elif-else结构"></a>if-elif-else结构</h3><p>如果检查的对象超过两个时，则使用该结构，该结构会检查每个测试条件，知道遇到通过的测试条件，执行紧跟的代码，并跳过余下的测试。<br>该结构的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">    price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    price = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    price = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your admission cost is $5</span><br></pre></td></tr></table></figure><br>我们可以根据需要使用任意数量的elif代码块，有时为了安全起见，我们可以省略else代码块来避免无效数据与而恶意数据。</p><h3 id="测试多个条件"><a href="#测试多个条件" class="headerlink" title="测试多个条件"></a>测试多个条件</h3><p>if-elif-else结构虽然强大，但是只适用于测试一个特定的条件。如果要检查我们所有关心的条件，我们则需要使用多个if语句，示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding mushrooms.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding pepperoni.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;extra cheese&#x27;</span> <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adding extra cheese.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms</span><br><span class="line">Adding extra cheese</span><br><span class="line"></span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure><br>if-elif-else结构测试的条件只要满足就会执行相应的代码块，并跳过余下的测试，所以在这个程序里不能使用该结构。</p><h3 id="用if语句处理列表"><a href="#用if语句处理列表" class="headerlink" title="用if语句处理列表"></a>用if语句处理列表</h3><h3 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h3><p>用一小段代码教大家如何使用。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping == <span class="string">&#x27;green papper&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we are out of green peppers right now.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms.</span><br><span class="line">Sorry, we are out of green peppers right now.</span><br><span class="line">Adding extra cheese.</span><br><span class="line"></span><br><span class="line">Finished making your pizza!</span><br></pre></td></tr></table></figure></p><h3 id="确定列表不为空"><a href="#确定列表不为空" class="headerlink" title="确定列表不为空"></a>确定列表不为空</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings:</span><br><span class="line">    <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want a plain pizza?</span><br></pre></td></tr></table></figure></p><h3 id="使用多个列表"><a href="#使用多个列表" class="headerlink" title="使用多个列表"></a>使用多个列表</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">available_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;olives&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;pepperoni&#x27;</span>,<span class="string">&#x27;pineapple&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;french fries&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we don&#x27;t have &quot;</span> + requested_topping + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms.</span><br><span class="line">Sorry we don&#x27;t have french fries.</span><br><span class="line">Adding extra cheese.</span><br><span class="line"></span><br><span class="line">Finish making your pizza!</span><br></pre></td></tr></table></figure></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><p>字典是<strong>一系列键-值对</strong>，用{}括号括起，示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;point&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><br>访问字典，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">green</span><br></pre></td></tr></table></figure><br>返回的是与键相关的值。</p><h3 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5,&#x27;x_position&#x27;: 0,&#x27;y_position&#x27;: 25&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is now &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The alien is green.</span><br><span class="line">The alien is now yellow.</span><br></pre></td></tr></table></figure></p><h3 id="删除键-值对"><a href="#删除键-值对" class="headerlink" title="删除键-值对"></a>删除键-值对</h3><p>使用del语句删除，删除时要指定字典名和要删除的键。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;,&#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><p>使用循环和<strong>items()函数</strong>，但需要两个变量，一个存放键，一个存放值。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>,<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>,<span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nKey: &quot;</span> + key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Value: &quot;</span> + value)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Key: last</span><br><span class="line">Value: fermi</span><br><span class="line"></span><br><span class="line">Key: first</span><br><span class="line">Value: enrico</span><br><span class="line"></span><br><span class="line">Key: username</span><br><span class="line">Value: efermi</span><br></pre></td></tr></table></figure></p><h3 id="遍历字典中所有的键"><a href="#遍历字典中所有的键" class="headerlink" title="遍历字典中所有的键"></a>遍历字典中所有的键</h3><p>使用<strong>keys()函数</strong>，该函数还可以用于检测单个键(把程序里的变量换成你想检测的键即可)，该函数的用法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,<span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br></pre></td></tr></table></figure><br>如果想按顺序遍历则只需将favorite_languages.keys()改为sorted(favorite_languages.keys())。</p><h3 id="遍历字典中所有的值"><a href="#遍历字典中所有的值" class="headerlink" title="遍历字典中所有的值"></a>遍历字典中所有的值</h3><p>使用<strong>values()函数</strong>，该函数的使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;<span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,<span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><br>如果字典中的值有重复的，可以使用<strong>set()函数</strong>来找出其中独一无二的元素，并使用这些元素创建一个集合，只需把程序里的favorite_languages.values()改为set(favorite_languages.values())即可。</p><h2 id="嵌套字典"><a href="#嵌套字典" class="headerlink" title="嵌套字典"></a>嵌套字典</h2><h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><p>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_0,alien_1,alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="built_in">print</span>(alien)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 10&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 15&#125;</span><br></pre></td></tr></table></figure></p><h3 id="在字典中储存列表"><a href="#在字典中储存列表" class="headerlink" title="在字典中储存列表"></a>在字典中储存列表</h3><p>示例代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pizza = &#123;<span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,<span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mushrooms</span><br><span class="line">extra cheese</span><br></pre></td></tr></table></figure><br>如果想输出字典里键值对键对应列表里的值，则需要使用嵌套循环。(如果不懂，Python编程从入门到实践P96页的favorite_languages.py)</p><h3 id="字典中储存字典"><a href="#字典中储存字典" class="headerlink" title="字典中储存字典"></a>字典中储存字典</h3><p>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> username,user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>]</span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Username: aeinstein</span><br><span class="line">        Full name: Albert Einstein</span><br><span class="line">        Location: Princeton</span><br><span class="line"></span><br><span class="line">Username: mcurie</span><br><span class="line">        Full name: Marie Curie</span><br><span class="line">        Location: Paris</span><br></pre></td></tr></table></figure><br>学到后面的话要注意每位用户的字典都包含不同的键，for循环里会更复杂。</p><h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h1><h2 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h2><p>Python的<strong>input()函数</strong>包含了函数内字符串的输出与输入，且在反回时，只返回用户输入的值。<br>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;Please enter your name: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter your name: Alex</span><br><span class="line">Hello, Alex!</span><br></pre></td></tr></table></figure><br>使用input()函数Python默认将用户输入的解读为字符串，如果想字符串转为整型则需要用到<strong>int()函数</strong>。需要将想转换的变量放进去int()函数就行了。</p><h2 id="使用while循环"><a href="#使用while循环" class="headerlink" title="使用while循环"></a>使用while循环</h2><h3 id="简单使用Python循环"><a href="#简单使用Python循环" class="headerlink" title="简单使用Python循环"></a>简单使用Python循环</h3><p>示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><br>还可以直接用于检测字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span>                         <span class="comment"># +=在存储在变量中的字符串末尾附加一个字符串</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>：</span><br><span class="line">    message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    <span class="keyword">if</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><br>输出结果就不写了。<br>我们也可以使用<strong>标志</strong>。<br>如在上述程序中加入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">active = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br>将循环改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> active:</span><br></pre></td></tr></table></figure><br>当输入的为’quit’时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">active = <span class="literal">False</span></span><br></pre></td></tr></table></figure><br>使用<strong>break语句</strong>可以跳出整个循环，如果程序执行了break语句则后面的代码直接跳过，学过C语言的都知道咋用。(doge)<br>使用<strong>continue语句</strong>可以跳出单次循环，如果程序执行了continue则后面的语句直接跳过，学过C语言的都知道咋用。(doge)</p><h2 id="使用while循环处理列表和字典"><a href="#使用while循环处理列表和字典" class="headerlink" title="使用while循环处理列表和字典"></a>使用while循环处理列表和字典</h2><h3 id="列表之间移动元素"><a href="#列表之间移动元素" class="headerlink" title="列表之间移动元素"></a>列表之间移动元素</h3><p>列表之间移动元素，使用<strong>pop()函数</strong>将原列表中的元素弹出后再将其加入到其他列表中，用于验证某些方面的东西，如以下代码就是用于验证用户是否注册。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;brian&#x27;</span>,<span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    <span class="built_in">print</span>(confirmed_user.title())</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line"></span><br><span class="line">The following users have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></table></figure></p><h3 id="删除包含特定值的所有元素"><a href="#删除包含特定值的所有元素" class="headerlink" title="删除包含特定值的所有元素"></a>删除包含特定值的所有元素</h3><p>代码示例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">people = [<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;simple&#x27;</span>,<span class="string">&#x27;git&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;alex&#x27;</span> <span class="keyword">in</span> people:</span><br><span class="line">    people.remove(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(people)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;john&#x27;,&#x27;simple&#x27;,&#x27;git&#x27;]</span><br></pre></td></tr></table></figure></p><h3 id="填充字典"><a href="#填充字典" class="headerlink" title="填充字典"></a>填充字典</h3><p>先键后值。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125;</span><br><span class="line"></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>)</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;Whitch mountain would you like to climb someday? &quot;</span>)</span><br><span class="line">    responses[name] = response</span><br><span class="line">    repeat = <span class="built_in">input</span>(<span class="string">&quot;World you like to let another person respond?(yes/no) &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">        polling_active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name,response <span class="keyword">in</span> responses.items():</span><br><span class="line">    <span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">Whitch mountain world you like to climb someday? Denali</span><br><span class="line">World you like to let another person respond?(yes/no) no</span><br><span class="line"></span><br><span class="line">--- Poll Results ---</span><br><span class="line">Eric would like to climb Denali.</span><br></pre></td></tr></table></figure><br>先键后值，先键后值，先键后值，明明白白。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="简单使用函数"><a href="#简单使用函数" class="headerlink" title="简单使用函数"></a>简单使用函数</h2><p>定义一个函数使用的是<strong>def语句</strong>，如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><br>向函数传递信息，将上面的代码完善一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span> + username.title() + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user(<span class="string">&#x27;Alex&#x27;</span>)</span><br></pre></td></tr></table></figure><br>上面就是简单的使用了一下调用函数。</p><h2 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h2><p>实参和形参的概念我就不多讲了，C语言里有说。</p><h3 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h3><p>在调用函数时，实参与形参的关联顺序是基于实参的顺序的，这种叫<strong>位置实参</strong>。在调用时得注意实参与形参得顺序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type,pet_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br></pre></td></tr></table></figure><br>在调用函数的时候还有一种叫<strong>关键字实参</strong>，在使用关键字实参时就不用调整顺序了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type,pet_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>,animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster&#x27;s name is Harry.</span><br></pre></td></tr></table></figure></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>在编写调用函数时，我们可以给形参指定一个<strong>默认值</strong>，在实参的传递中，如果提供了实参，则使用实参，否则使用默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">pet_name,animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a dog.</span><br><span class="line">My dog&#x27;s name is Willie.</span><br></pre></td></tr></table></figure><br>注意，在函数的定义中，修改了形参的排列顺序，在调用时只包含一个实参，但是Python仍然将这个实参视为位置实参，所以需要将pet_name放在开头的原因。</p><h3 id="避免实参错误"><a href="#避免实参错误" class="headerlink" title="避免实参错误"></a>避免实参错误</h3><p>在使用函数时避免实参的不匹配错误，虽然编译器给予你提示，但在使用位置实参的时候，还是要注意实参与形参的位置。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><h3 id="简单使用返回值"><a href="#简单使用返回值" class="headerlink" title="简单使用返回值"></a>简单使用返回值</h3><p>与C语言的没什么很大的区别，C语言里的咋用，在这边基本都能用，简单几个程序，概括了。<br>示例一：简单使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name,last_name</span>):</span></span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure><br>示例二：让实参变成可选<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name,last_name,middle_name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;lee&#x27;</span>,<span class="string">&#x27;hooker&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jimi Hendrix</span><br><span class="line">John Lee Hooker</span><br></pre></td></tr></table></figure><br>示例三：返回字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span>(<span class="params">first_name,last_name,age=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name,<span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>,<span class="string">&#x27;hendrix&#x27;</span>,age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;first&#x27;: jimi,&#x27;last&#x27;: hendrix,&#x27;age&#x27;: 27&#125;</span><br></pre></td></tr></table></figure><br>示例三：结合while循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name,last_name</span>):</span></span><br><span class="line">    full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(enter &#x27;q&#x27; at any time to quit)&quot;</span>)</span><br><span class="line">    f_name = <span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name = <span class="built_in">input</span>(<span class="string">&quot;Last name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">formatted_name = get_formatted_name(f_name,l_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + formatted_name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Please tell me your name:</span><br><span class="line">(enter &#x27;q&#x27; at any time to quit)</span><br><span class="line">First name:Alex</span><br><span class="line">Last name:Li</span><br><span class="line"></span><br><span class="line">Hello, Alex Li!</span><br><span class="line"></span><br><span class="line">Please tell me your name:</span><br><span class="line">(enter &#x27;q&#x27; at any time to quit)</span><br><span class="line">First name:q</span><br></pre></td></tr></table></figure></p><h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">unexamined_students = [<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;balle&#x27;</span>]</span><br><span class="line">examined_students = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish_students</span>(<span class="params">unexamined_students,examined_students</span>):</span></span><br><span class="line">    <span class="keyword">while</span> unexamined_students:</span><br><span class="line">        examined_student = unexamined_students.pop()</span><br><span class="line">        <span class="built_in">print</span>(examined_student.title() + <span class="string">&quot; you are finished the exam!&quot;</span>)</span><br><span class="line">        examined_students.append(examined_student)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_finished_students</span>(<span class="params">examined_students</span>):</span></span><br><span class="line">    <span class="keyword">for</span> finished_student <span class="keyword">in</span> examined_students:</span><br><span class="line">        <span class="built_in">print</span>(finished_student.title() + <span class="string">&quot; you have done&quot;</span>)</span><br><span class="line"></span><br><span class="line">finish_students(unexamined_students,examined_students)</span><br><span class="line">show_finished_students(examined_students)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Balle you are finished the exam!</span><br><span class="line">John you are finished the exam!</span><br><span class="line">Alex you are finished the exam!</span><br><span class="line">Balle you have done</span><br><span class="line">John you have done</span><br><span class="line">Alex you have done</span><br></pre></td></tr></table></figure><br>使用切片的方法向函数传递一个列表的副本，这样可以保留原来列表里的内容，从而达到保留列表信息的目的。<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finish_students(unexamined_students[:],examined_students)</span><br></pre></td></tr></table></figure></p><h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><p>传递任意数量的实参，可以用<strong>*号加变量名</strong>让Python创建一个空元组，这样就可以收集任意数量的实参。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">*toppings</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushroom&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- mushroom</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><br>结合使用位置实参和任意数量的实参<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">size,*toppings</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>,<span class="string">&#x27;mushroom&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushroom</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><br>使用用关键字实参<br>Python用**号加变量名创建一个空字典<br>使用方法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span>(<span class="params">first,last,**user_info</span>):</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;li&#x27;</span>,location=<span class="string">&#x27;dg&#x27;</span>,fiel=<span class="string">&#x27;superman&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;first_name&#x27;: &#x27;alex&#x27;,&#x27;last_name&#x27;: &#x27;li&#x27;,&#x27;loaction&#x27;: &#x27;dg&#x27;,&#x27;fiel&#x27;: &#x27;superman&#x27;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h2><h3 id="导入其他-py文件里的代码方法"><a href="#导入其他-py文件里的代码方法" class="headerlink" title="导入其他.py文件里的代码方法"></a>导入其他.py文件里的代码方法</h3><p>使用<strong>import语句</strong>进行导入，使用这种方法导入所有代码需要在使用时带上包名(过久了看不懂的话看第一版Python编程从入门到实践P134页)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;filename&gt;</span><br></pre></td></tr></table></figure><br>使用<em>号运算符也可以导入所用模块，不同的是使用这种方法的话就不需要加包名。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> &lt;filename&gt; <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><br><em>*以上就是两种导入包中所有函数的方法。</em></em><br>导入特定函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> &lt;filename&gt; <span class="keyword">import</span> &lt;filename_function&gt;</span><br></pre></td></tr></table></figure></p><h3 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用as给模块指定别名</h3><p>如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> names <span class="keyword">as</span> n</span><br><span class="line"></span><br><span class="line">n.put_name(<span class="string">&#x27;alex&#x27;</span>)</span><br></pre></td></tr></table></figure><br>知道如何使用即可。</p><h3 id="如何编写一个完美的函数"><a href="#如何编写一个完美的函数" class="headerlink" title="如何编写一个完美的函数"></a>如何编写一个完美的函数</h3><p><strong>在编写一个函数时要给函数名指定描述性名称，且只在其中使用小写字母和下滑线。每个函数都应该简要的阐述其功能的注释。在给形参指定默认值时，等号两边不要有空格，在函数调用中的关键字实参，也要遵守这种规定。要学会缩进，便于他人阅读。</strong></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>根据类来创建对象的方法被称为<strong>实例化</strong>。<br>可以通过实例来访问的变量称为<strong>属性</strong>。</p><h2 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h2><h3 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h3><p>根据人物的信息创建一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,name,age</span>):</span>         <span class="comment">#初始化属性name和age</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is setting now.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure><br><strong>在类中的函数被称为方法</strong><br>在这个代码中，使用了方法<em>init</em>()，这个方法是一种特殊的方法，每次要根据Dog类创建一个新实例时，Python每次都要自动运行它。命名规定中要在init的前后加上下滑线，避免与普通方法发生冲突。<br>在这个方法的定义中形参self必不可少，且self形参必须在其他形参前面，原因是因为Python在调用<em>init</em>()这个方法来创建实例时，会<strong>自动传传入实参self</strong>。与每个类相关联的的方法调用都会自动传递实参self，它是一个指向实例本身的引用，让实例可以访问类中的属性和方法。</p><h3 id="创建一个实例"><a href="#创建一个实例" class="headerlink" title="创建一个实例"></a>创建一个实例</h3><p><strong>创建实例</strong>，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;world&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog age is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><br><strong>调用方法</strong>，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;world&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll_over()</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">World is now setting.</span><br><span class="line">World rolled over!</span><br></pre></td></tr></table></figure><br>创建多个实例，模仿上面的代码创建就行了，<strong>注意在创建新的实例时传递进去的self实参要不一样。</strong></p><h2 id="使用类和实例"><a href="#使用类和实例" class="headerlink" title="使用类和实例"></a>使用类和实例</h2><p>先编写一个Car类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>)</span></span><br><span class="line"><span class="function">        <span class="title">long_name</span> = <span class="title">str</span>(<span class="params">self.year</span>) + &#x27; &#x27; + <span class="title">self</span>.<span class="title">make</span> + &#x27; &#x27; + <span class="title">self</span>.<span class="title">model</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">long_name</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">my_new_car</span> = <span class="title">Car</span>(<span class="params"><span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="params">my_new_car.get_descriptive_name(<span class="params"></span>)</span>)</span></span><br></pre></td></tr></table></figure></p><h3 id="给属性指定默认值"><a href="#给属性指定默认值" class="headerlink" title="给属性指定默认值"></a>给属性指定默认值</h3><p><strong>在类中每个属性都必须有初始值</strong>。<br>下面继续完善上面的类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        --snip--</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it&quot;</span>)</span><br><span class="line">    </span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure><br>输出结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 0 miles on it.</span><br></pre></td></tr></table></figure></p><h3 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h3><p>有三种方法修改属性的值<br>第一种，直接修改属性的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_new_car.otometer_reading = <span class="number">23</span></span><br></pre></td></tr></table></figure><br>第二种，通过方法修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_otometer</span>(<span class="params">self,mileage</span>):</span></span><br><span class="line">        self.otometer_reading = mileage</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_otometer(<span class="number">23</span>)</span><br><span class="line">my_new_car.read_otometer()</span><br></pre></td></tr></table></figure><br>第三种，通过方法对属性的值进行递增<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_otometer</span>(<span class="params">self,mileage</span>):</span></span><br><span class="line">        --snip--</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_otometer</span>(<span class="params">self,miles</span>):</span></span><br><span class="line">        self.otometer_reading += miles</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;a4&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_used_car.update_otometer(<span class="number">23500</span>)</span><br><span class="line">my_used_car.read_otometer()</span><br><span class="line"></span><br><span class="line">my_used_car.increment_otometer(<span class="number">100</span>)</span><br><span class="line">my_used_car.read_otometer()</span><br></pre></td></tr></table></figure></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>子类继承父类的所有属性和方法</strong></p><h3 id="子类的方法init"><a href="#子类的方法init" class="headerlink" title="子类的方法init()"></a>子类的方法<em>init</em>()</h3><p>父类使用Car类，继承写法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make,model,year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure><br>创建子类时，父类必须在同一个文件里，且必须要位于子类前面。<strong>super()函数</strong>是一个特殊的函数，它帮助Python将父类和子类联系起来。</p><h3 id="子类定义属性和方法"><a href="#子类定义属性和方法" class="headerlink" title="子类定义属性和方法"></a>子类定义属性和方法</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self,battery_size) + <span class="string">&quot;kWh battery.&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure></p><h3 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h3><p>如果父类的方法不符合子类模拟的实物的行为，都可以对其进行重写。只要在子类中定义一个方法与父类方法同名即可，这样Python就不会考虑父类的方法，只关注子类中定义的相应方法。</p><h3 id="将实例作为属性"><a href="#将实例作为属性" class="headerlink" title="将实例作为属性"></a>将实例作为属性</h3><p>在自己给类添加的细节越来越多时，我们可能需要将类的一部分作为一个独立的类提取出来，将大类分成多个小类。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,battery_size=<span class="number">70</span></span>):</span></span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,make,model,year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>()._init_(make,model,year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tasla.battery.describe_battery()</span><br></pre></td></tr></table></figure><br>如果想要修改电瓶容量，只需要提供一个值即可。</p><h3 id="导入其他模块里的类"><a href="#导入其他模块里的类" class="headerlink" title="导入其他模块里的类"></a>导入其他模块里的类</h3><p>和导入.py文件里函数的方法一样，不做过多的笔记了。(需要注意一下的是继承这个问题)</p><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><h2 id="读取一个文件"><a href="#读取一个文件" class="headerlink" title="读取一个文件"></a>读取一个文件</h2><p>使用<strong>read()函数</strong>，使用这个函数时，该函数会在末尾自动添加一个空字符串，使用rstrip()函数将其清除即可。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents.rstrip())</span><br></pre></td></tr></table></figure><br>想要逐行读取文件，只需使用循环语句即可。<br>创建一个包含文件内各行内容的列表，只需要使用<strong>readlines()函数</strong>即可。<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(lines.rstrip())</span><br></pre></td></tr></table></figure><br>使用文件的内容<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure><br><strong>此处的pi_string变量需要初始化，是因为在使用+=运算符时需要知道pi_string自身的情况，而for循环里的line生成就是被用的，所以已经进行了初始化。</strong><br>如果这个文件里包含了很多为数字，而你只想打印部分，只需要在输出中对存储列表的那个变量使用切片即可。<br>你想判断某个东西是否在这个文件中，只需要结合写读取文件的代码加上if语句判断即可。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>只需在将with open这条语句改写即可，打开文件时，我们可以指定<strong>读写模式(‘r’),写入模式(‘w’),附加模式(‘a’),读取和写入模式(‘r+’)</strong>。使用写入模式时要小心，如果在写入前已存在该文件，则它会在使用前清空里面的内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure><br>再使用<strong>write()函数</strong>进行写入，可以在你想写入的语句后面加上转义避免两行的语句写进了一行。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>处理<strong>ZeroDivisionError异常</strong><br>使用<strong>try-except-else代码块</strong>块处理<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two number, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&quot;Second number&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number)/<span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure><br>处理<strong>FileNotFoundError异常</strong><br>使用<strong>try-except-else代码块</strong>块处理，使用方法同上。</p><h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><p>使用<strong>split()函数</strong><br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        msg = <span class="string">&quot;Sorry, the file &quot;</span> + filename + <span class="string">&quot;does not exist.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        words = contents.split()</span><br><span class="line">        num_words = <span class="built_in">len</span>(words)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The file &quot;</span> + filename + <span class="string">&quot; has about&quot;</span> + <span class="built_in">str</span>(num_words) + <span class="string">&quot; words.&quot;</span>)</span><br></pre></td></tr></table></figure><br>如果想使用多个文本，使用函数调用就行了。如果想在失败时让程序<strong>一声不吭</strong>，只需要在<strong>except该行后面改写为pass语句</strong>。</p><h3 id="使用json文件存储数据"><a href="#使用json文件存储数据" class="headerlink" title="使用json文件存储数据"></a>使用json文件存储数据</h3><p>使用<strong>json.dump()函数</strong>和<strong>json.load()函数</strong>。在代码的前面要加上import json，调用json包。<br>json.dump()函数接受两个参数，一个是要存储的数据，一个是文件对象，存储进去的格式与Python中的一样。<br>json.load()函数，在里面补充文件路径，然后再将文件里面的内容存储在Python里面的一个变量中，使用时直接使用变量即可。尝试储存一个用户信息<br>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;文件名.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We will remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>将代码做进一步的改进，将代码划分为一系列完成具体工作的函数，这样被称为重构。</p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><hr><p><br><br>一个形象的比喻：</p><p>训练集—————-学生的课本；学生根据课本里的内容来掌握知识。<br>验证集—————-作业；通过作业可以知道不同学生学习情况、进步的速度快慢。<br>测试集—————-考试；考的题是平常都没有见过，考察学生举一反三的能力。<br>传统上，一般三者切分的比例是：6：2：2，验证集并不是必须的。</p><p>训练集直接参与了模型调参的过程，显然不能用来反映模型真实的能力(防止课本死记硬背的学生拥有最好的成绩，即防止过拟合)。<br>验证集参与了人工调参(超参数)的过程，也不能用来最终评判一个模型(刷题库的学生不能算是学习好的学生)。<br>所以要通过最终的考试(测试集)来考察一个学(模)生(型)真正的能力(期末考试)。<br>测试集为了具有泛化代表性，往往数据量比较大，所以往往只取测试集的其中一小部分作为训练过程中的验证集。当然有的论文中没有设置验证集也是可以的。<br><br></p><hr><h1 id="matplotlib笔记"><a href="#matplotlib笔记" class="headerlink" title="matplotlib笔记"></a>matplotlib笔记</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">x = range(2,20,2)</span><br><span class="line">y = range(2,20,2)</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>设置字体的方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&#x27;字体路径&#x27;</span>)</span><br><span class="line">plt.xticks(<span class="built_in">list</span>()[::<span class="number">3</span>],xtick_labels[::<span class="number">3</span>],rotation=<span class="number">45</span>,fontproperties=my_font)</span><br></pre></td></tr></table></figure></p><hr><p><br></p><hr><h1 id="错误修复篇"><a href="#错误修复篇" class="headerlink" title="错误修复篇"></a>错误修复篇</h1><h2 id="No-module-named-‘pip’异常"><a href="#No-module-named-‘pip’异常" class="headerlink" title="No module named ‘pip’异常"></a>No module named ‘pip’异常</h2><p>Windows解决如下<br>打开cmd输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ensurepip</span><br></pre></td></tr></table></figure><br>再输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><br>升级pip即可</p><h1 id="换源下载篇"><a href="#换源下载篇" class="headerlink" title="换源下载篇"></a>换源下载篇</h1><p>中科大的源<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 某个包 -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;font color=#FF0000&gt;以下的程序都是在Python3下运行，主要是给自己看的，代码没有任何的注释，所以可能对读者不咋友好。&lt;/font&gt;

&lt;h1 id=&quot;变量和简单的数据类型&quot;&gt;&lt;a href=&quot;#变量和简单的数据类型&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
</feed>
